{"ast":null,"code":"var _jsxFileName = \"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport taskList from \"./helpers/dummyTasksApi.json\";\nimport WholeMainPageContainer from './containers/WholeMainPageContainer';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [allTasks, setAllTasks] = useState(null);\n  const [completedTasks, setCompletedTasks] = useState(null);\n  const [uncompletedTasks, setUncompletedTasks] = useState([]);\n  useEffect(() => {\n    // the api call that will get the initial data\n    setAllTasks(taskList);\n  }, []);\n  useEffect(() => {\n    // setting the comleted and unclompleted tasks \n    // in different states.\n    if (allTasks) {\n      console.log(\"allTasks\", allTasks); ////////////\n\n      let completedHelper = [];\n      let uncompletedHelper = [];\n\n      for (let task of allTasks) {\n        if (task.completed) {\n          completedHelper.push(task);\n        } else {\n          uncompletedHelper.push(task);\n        }\n      }\n\n      setCompletedTasks(completedHelper);\n      setUncompletedTasks(uncompletedHelper);\n    }\n  }, [allTasks]);\n  return /*#__PURE__*/_jsxDEV(WholeMainPageContainer, {\n    completedTasks: completedTasks,\n    uncompletedTasks: uncompletedTasks\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"5zSHu9jYFhLIvBL8/JsJXqDv/No=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/App.js"],"names":["React","useState","useEffect","taskList","WholeMainPageContainer","App","allTasks","setAllTasks","completedTasks","setCompletedTasks","uncompletedTasks","setUncompletedTasks","console","log","completedHelper","uncompletedHelper","task","completed","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,sBAAP,MAAmC,qCAAnC;AAGA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA0CV,QAAQ,CAAC,EAAD,CAAxD;AAGEC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAK,IAAAA,WAAW,CAACJ,QAAD,CAAX;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA,QAAGI,QAAH,EAAY;AACZM,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBP,QAAxB,EADY,CACsB;;AAClC,UAAIQ,eAAe,GAAG,EAAtB;AACA,UAAIC,iBAAiB,GAAG,EAAxB;;AAEE,WAAI,IAAIC,IAAR,IAAgBV,QAAhB,EAAyB;AACvB,YAAGU,IAAI,CAACC,SAAR,EAAkB;AAChBH,UAAAA,eAAe,CAACI,IAAhB,CAAqBF,IAArB;AAED,SAHD,MAGK;AACHD,UAAAA,iBAAiB,CAACG,IAAlB,CAAuBF,IAAvB;AAED;AACF;;AACDP,MAAAA,iBAAiB,CAACK,eAAD,CAAjB;AACAH,MAAAA,mBAAmB,CAACI,iBAAD,CAAnB;AACD;AAEF,GArBQ,EAqBN,CAACT,QAAD,CArBM,CAAT;AAuBF,sBAEE,QAAC,sBAAD;AAAwB,IAAA,cAAc,EAAGE,cAAzC;AAA0D,IAAA,gBAAgB,EAAGE;AAA7E;AAAA;AAAA;AAAA;AAAA,UAFF;AAID;;GAtCQL,G;;KAAAA,G;AAwCT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport taskList from \"./helpers/dummyTasksApi.json\";\nimport WholeMainPageContainer from './containers/WholeMainPageContainer';\n\n\nimport './App.css';\n\nfunction App() {\n  const [allTasks, setAllTasks] = useState(null);\n  const [completedTasks, setCompletedTasks] = useState(null);\n  const [uncompletedTasks, setUncompletedTasks] = useState([]);\n\n\n    useEffect(() => {\n      // the api call that will get the initial data\n      setAllTasks(taskList)\n    }, []);\n\n    useEffect(() => {\n      // setting the comleted and unclompleted tasks \n      // in different states.\n      if(allTasks){\n      console.log(\"allTasks\", allTasks);////////////\n      let completedHelper = [];\n      let uncompletedHelper = [];\n      \n        for(let task of allTasks){\n          if(task.completed){\n            completedHelper.push(task);\n\n          }else{\n            uncompletedHelper.push(task);\n\n          }\n        }\n        setCompletedTasks(completedHelper);\n        setUncompletedTasks(uncompletedHelper);\n      }\n      \n    }, [allTasks]);\n\n  return (\n    \n    <WholeMainPageContainer completedTasks={ completedTasks } uncompletedTasks={ uncompletedTasks }/>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}