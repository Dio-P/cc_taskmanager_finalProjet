{"ast":null,"code":"var _jsxFileName = \"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport taskList from \"./helpers/dummyTasksApi.json\";\nimport WholeMainPageContainer from './containers/WholeMainPageContainer';\nimport DistinctTaskPage from './containers/DistinctTaskPage';\nimport AddNewTaskPage from './containers/AddNewTaskPage';\nimport { Route, Routes } from \"react-router-dom\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [allTasks, setAllTasks] = useState(null);\n  const [completedTasks, setCompletedTasks] = useState([]);\n  const [uncompletedTasks, setUncompletedTasks] = useState([]);\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    // the api call that will get the initial data\n    setAllTasks(taskList);\n  }, []);\n  useEffect(() => {\n    // setting the comleted and unclompleted tasks \n    // in different states.\n    if (allTasks) {\n      console.log(\"allTasks\", allTasks); ////////////\n\n      let completedHelper = [];\n      let uncompletedHelper = [];\n\n      for (let task of allTasks) {\n        if (task.completed) {\n          completedHelper.push(task);\n        } else {\n          uncompletedHelper.push(task);\n        }\n      }\n\n      setCompletedTasks(completedHelper);\n      setUncompletedTasks(uncompletedHelper);\n    }\n  }, [allTasks]);\n  useEffect(() => {\n    // get the categories from api\n    const dummyCategoriesList = [\"studieng\", \"playing\", \"making something beautiful\", \"get bored\", \"play tetris\"];\n    console.log(\"categories must have been gotten\");\n    setCategories(dummyCategoriesList);\n  }, [allTasks]);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(WholeMainPageContainer, {\n        uncompletedTasks: uncompletedTasks,\n        completedTasks: completedTasks,\n        categories: categories\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/task/:task_title\",\n      element: /*#__PURE__*/_jsxDEV(DistinctTaskPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 49\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/task/createNewTask\",\n      element: /*#__PURE__*/_jsxDEV(AddNewTaskPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 51\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fIa9vlGrZN5NWwWB+yMLhaJBk3A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/App.js"],"names":["React","useState","useEffect","taskList","WholeMainPageContainer","DistinctTaskPage","AddNewTaskPage","Route","Routes","App","allTasks","setAllTasks","completedTasks","setCompletedTasks","uncompletedTasks","setUncompletedTasks","categories","setCategories","console","log","completedHelper","uncompletedHelper","task","completed","push","dummyCategoriesList"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,sBAAP,MAAmC,qCAAnC;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,SACEC,KADF,EAEEC,MAFF,QAGO,kBAHP;AAMA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACW,cAAD,EAAiBC,iBAAjB,IAAsCZ,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACa,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,EAAD,CAA5C;AAGEC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAS,IAAAA,WAAW,CAACR,QAAD,CAAX;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA,QAAGQ,QAAH,EAAY;AACZQ,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBT,QAAxB,EADY,CACsB;;AAClC,UAAIU,eAAe,GAAG,EAAtB;AACA,UAAIC,iBAAiB,GAAG,EAAxB;;AAEE,WAAI,IAAIC,IAAR,IAAgBZ,QAAhB,EAAyB;AACvB,YAAGY,IAAI,CAACC,SAAR,EAAkB;AAChBH,UAAAA,eAAe,CAACI,IAAhB,CAAqBF,IAArB;AAED,SAHD,MAGK;AACHD,UAAAA,iBAAiB,CAACG,IAAlB,CAAuBF,IAAvB;AAED;AACF;;AACDT,MAAAA,iBAAiB,CAACO,eAAD,CAAjB;AACAL,MAAAA,mBAAmB,CAACM,iBAAD,CAAnB;AACD;AAEF,GArBQ,EAqBN,CAACX,QAAD,CArBM,CAAT;AAuBAR,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMuB,mBAAmB,GAAG,CAAC,UAAD,EAAa,SAAb,EAAwB,4BAAxB,EAAsD,WAAtD,EAAmE,aAAnE,CAA5B;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACAF,IAAAA,aAAa,CAACQ,mBAAD,CAAb;AAED,GANQ,EAMN,CAACf,QAAD,CANM,CAAT;AAQF,sBACE,QAAC,MAAD;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,GAAZ;AAAgB,MAAA,OAAO,eAAE,QAAC,sBAAD;AAAwB,QAAA,gBAAgB,EAAGI,gBAA3C;AAA8D,QAAA,cAAc,EAAGF,cAA/E;AAAgG,QAAA,UAAU,EAAGI;AAA7G;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,mBAAZ;AAAgC,MAAA,OAAO,eAAG,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAA1C;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,qBAAZ;AAAkC,MAAA,OAAO,eAAG,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAA5C;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAlDQP,G;;KAAAA,G;AAoDT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport taskList from \"./helpers/dummyTasksApi.json\";\nimport WholeMainPageContainer from './containers/WholeMainPageContainer';\nimport DistinctTaskPage from './containers/DistinctTaskPage';\nimport AddNewTaskPage from './containers/AddNewTaskPage';\nimport {\n  Route,\n  Routes\n} from \"react-router-dom\";\n\n\nimport './App.css';\n\nfunction App() {\n  const [allTasks, setAllTasks] = useState(null);\n  const [completedTasks, setCompletedTasks] = useState([]);\n  const [uncompletedTasks, setUncompletedTasks] = useState([]);\n  const [categories, setCategories] = useState([]);\n\n\n    useEffect(() => {\n      // the api call that will get the initial data\n      setAllTasks(taskList)\n    }, []);\n\n    useEffect(() => {\n      // setting the comleted and unclompleted tasks \n      // in different states.\n      if(allTasks){\n      console.log(\"allTasks\", allTasks);////////////\n      let completedHelper = [];\n      let uncompletedHelper = [];\n      \n        for(let task of allTasks){\n          if(task.completed){\n            completedHelper.push(task);\n\n          }else{\n            uncompletedHelper.push(task);\n\n          }\n        }\n        setCompletedTasks(completedHelper);\n        setUncompletedTasks(uncompletedHelper);\n      }\n      \n    }, [allTasks]);\n\n    useEffect(() => {\n      // get the categories from api\n      const dummyCategoriesList = [\"studieng\", \"playing\", \"making something beautiful\", \"get bored\", \"play tetris\"]\n      console.log(\"categories must have been gotten\");\n      setCategories(dummyCategoriesList)\n      \n    }, [allTasks]);\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<WholeMainPageContainer uncompletedTasks={ uncompletedTasks } completedTasks={ completedTasks } categories={ categories }/>}/>\n      <Route path=\"/task/:task_title\" element={ <DistinctTaskPage/> }/>\n      <Route path=\"/task/createNewTask\" element={ <AddNewTaskPage/> }/>\n    </Routes>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}