[{"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/index.js":"1","/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/App.js":"2","/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/reportWebVitals.js":"3","/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/WholeMainPageContainer.js":"4","/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/AllTasksContainer.js":"5","/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/TasksBox.js":"6","/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/Task.js":"7","/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/DistinctTaskPage.js":"8","/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/AddNewTaskPage.js":"9","/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/TasksBoxMainMenuBar.js":"10","/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/DropDownMenu.js":"11"},{"size":628,"mtime":1650382750332,"results":"12","hashOfConfig":"13"},{"size":2340,"mtime":1650455321555,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1650380008128,"results":"15","hashOfConfig":"13"},{"size":573,"mtime":1650455352494,"results":"16","hashOfConfig":"13"},{"size":2715,"mtime":1650447771028,"results":"17","hashOfConfig":"13"},{"size":478,"mtime":1650400527734,"results":"18","hashOfConfig":"13"},{"size":529,"mtime":1650401771588,"results":"19","hashOfConfig":"13"},{"size":1250,"mtime":1650401556370,"results":"20","hashOfConfig":"13"},{"size":6001,"mtime":1650462006262,"results":"21","hashOfConfig":"13"},{"size":703,"mtime":1650455378128,"results":"22","hashOfConfig":"13"},{"size":680,"mtime":1650455055789,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5dkkuu",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"30"},"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/index.js",[],[],"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/App.js",[],[],[],"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/reportWebVitals.js",[],[],"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/WholeMainPageContainer.js",[],[],"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/AllTasksContainer.js",[],[],"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/TasksBox.js",["65","66"],[],"import { useEffect, useState } from \"react\";\nimport Task from \"../components/Task\";\n\nconst TasksBox = ({ tasks, taksCompl, title }) => {\n    \n\n    return (\n        <div>\n            <h3>{title}</h3>\n\n           {   \n           tasks.map(task => (\n              <Task task={task}/>\n           ))\n           }  \n\n            {   \n           taksCompl.map(task => (\n              <Task task={task}/>\n           ))\n           }    \n\n\n        </div>\n    )\n}\n\nexport default TasksBox;",[],"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/Task.js",[],[],"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/DistinctTaskPage.js",["67","68"],[],"import { useNavigate, useLocation } from \"react-router-dom\";\n\nconst DistinctTaskPage = () => {\n    const location = useLocation();\n    const task = location.state.task;\n    console.log(\"location\", location);\n    console.log(\"task\", task);\n\n    const onClickingTheCheckedButton = () => {\n            \n    }\n\n    return (\n        \n\n        <div>\n            <h3>{task.title}</h3>\n            <input type=\"checkbox\" checked={task.completed}/>\n             <div className=\"distinctTaskFieldBox\">\n                <p>{ task.type }</p>\n\n                {task.date?\n                <p>{ task.date }</p>\n                :\n                null\n                }\n\n                {task.time?\n                <p>{ task.time }</p>\n                :\n                null\n                }\n             </div>\n\n             <div>\n                 <h4>Collaborators</h4>\n             </div>\n\n             <div>\n                 <h4>Category</h4>\n                 <p>{ task.category }</p>\n             </div>\n\n             <div>\n                 <h4>Priority</h4>\n                 <p>{ task.priority }</p>\n             </div>\n\n             <div>\n                 <p>{ task.description }</p>\n             </div>\n        </div>\n    )\n}\n\nexport default DistinctTaskPage;",[],"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/AddNewTaskPage.js",["69","70","71","72","73"],[],"import { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport DropDownMenu from \"../components/DropDownMenu\";\n\nconst AddNewTaskPage = () => {\n    // const [taskToBeEdited, setTaskToBeEdited] = useState(null);\n    const [taskTitle, setTaskTitle] = useState(\"\");\n    const [taskCategory, setTaskCategory] = useState(null);\n    const [taskPriority, setTaskPriority] = useState(null);\n\n    const [hasDescription, setHasDescription] = useState(false);\n    const [taskDescription, setTaskDescription] = useState(null);\n    const [hasDate, setHasDate] = useState(false);\n    const [taskDate, setTaskDate] = useState(null);\n    const [hasTime, setHasTime] = useState(false);\n    const [taskTime, setTaskTime] = useState(null);\n    const [timedTaskType, setTimedTaskType] = useState(null);\n\n    const [hasDuration, setHasDuration] = useState(false);\n    const [taskDuration, setTaskDuration] = useState(null);\n    const [hasCollaborators, setHasCollaborators] = useState(false);\n    const [taskCollaborators, setTaskCollaborators] = useState(null);\n\n    const location = useLocation();\n    const categories = location.state.categories;\n    const priorities = location.state.priorities;\n\n    // let year = Date.prototype.getFullYear()\n    // let month = Date.prototype.getMonth()\n    // let day = Date.prototype.getDate()\n    \n    useEffect(() => {\n        setHasDescription(false)\n        \n    }, []);\n\n    const setCategoryFromDropDown = (choosenOption) => {\n            setTaskCategory(choosenOption);\n       \n        \n    }\n\n    const setPriorityFromDropDown = (choosenOption) => {\n            setTaskPriority(choosenOption);\n        \n    }\n\n    const addNewTask = (e) => {\n        e.preventDefault();\n        let newTask = {};\n        newTask[\"title\"]=taskTitle;\n        newTask[\"category\"]=taskCategory;\n        newTask[\"priority\"]=taskPriority;\n        newTask[\"completed\"]=false;\n        newTask[\"completedTimeStamp\"]=Date.now();\n\n        if(taskDescription){newTask[\"description\"]=taskDescription;}\n        if(taskDate){\n            newTask[\"date\"]=taskDate;\n            newTask[\"type\"]=timedTaskType;\n        }else{\n            newTask[\"type\"]=\"SOMEDAY\";\n\n        }\n        if(taskTime){newTask[\"time\"]=taskTime;}\n        if(taskDuration){newTask[\"duration\"]=taskDuration;}\n        \n        console.log(\"newTask\", newTask);\n        // send the object\n        // redirect to home page\n    }\n    // const location = useLocation();\n    \n\n    // useEffect(() => {\n    //     if(location){\n    //         const task = location.state.task;\n    //         setTaskToBeEdited(task);\n    //     }\n        \n    // }, [location]);\n   \n\n\n    return (\n        <div>\n            \n            <form onSubmit={addNewTask}>\n                <label htmlFor=\"taskTitle\">Task Title</label>\n                <input type=\"text\" name=\"taskTitle\" id=\"taskTitle\" value={taskTitle} onChange={e=> setTaskTitle(e.target.value)} required/>\n                {/* <h3>{taskTitle}</h3> */}\n\n                <label htmlFor=\"taskCategory\">Task Category</label>\n                <DropDownMenu options={ categories } setValueFromDropDown={(choosenOption, categories)=> setCategoryFromDropDown(choosenOption)} />\n\n                <label htmlFor=\"taskPriority\">Task Priority</label>\n                <DropDownMenu options={ priorities } setValueFromDropDown={(choosenOption, categories)=> setPriorityFromDropDown(choosenOption)} />\n\n                {hasDescription?\n                <>\n                    <label htmlFor=\"taskDescription\">Task Description</label>\n                    <input type=\"text\" name=\"taskDescription\" id=\"taskDescription\" value={taskDescription} onChange={e=> setTaskDescription(e.target.value)}/>\n                    <button onClick={()=> setHasDescription(false)}>- Remove Description</button>\n                </>\n                :\n                <button onClick={()=> setHasDescription(true)}>+ Add Description</button>\n                }\n\n                {hasDate?\n                <>\n                    <label htmlFor=\"taskDate\">Task Date</label>\n                    <input type=\"date\" name=\"taskDate\" id=\"taskDate\" value={taskDate} onChange={e=> setTaskDate(e.target.value)}/>\n                    <div>\n                    <label htmlFor=\"taskDate\">Do On</label>\n                    <input type=\"radio\" name=\"timedTaskType\" id=\"do_on\" value=\"DO_ON\" onChange={e=> setTimedTaskType(e.target.value)}/>\n                    <label htmlFor=\"taskDate\">Do By</label>\n                    <input type=\"radio\" name=\"timedTaskType\" id=\"do_on\" value=\"DO_BY\" onChange={e=> setTimedTaskType(e.target.value)}/>\n\n                    </div>\n                    <button onClick={()=> setHasDate(false)}>- Remove Date</button>\n                </>\n                :\n                <button onClick={()=> setHasDate(true)}>+ Add Date</button>\n                }\n\n                {hasTime?\n                <>\n                    <label htmlFor=\"taskDate\">Task Time</label>\n                    <input type=\"time\" name=\"taskDate\" id=\"taskDate\" value={taskTime} onChange={e=> setTaskTime(e.target.value)}/>\n                    <button onClick={()=> setHasTime(false)}>- Remove Date</button>\n                </>\n                :\n                <button onClick={()=> setHasTime(true)}>+ Add Time</button>\n                }\n\n                {hasDuration?\n                <>\n                    <label htmlFor=\"taskDuration\">Task Duration</label>\n                    <input type=\"text\" name=\"taskDuration\" id=\"taskDuration\" placeholder=\"in minutes\" value={taskDuration} onChange={e=> setTaskDuration(e.target.value)}/>\n                    <button onClick={()=> setHasDuration(false)}>- Remove Duration</button>\n                </>\n                :\n                <button onClick={()=> setHasDuration(true)}>+ Add Duration</button>\n                }  \n\n                <button type=\"submit\">Create Task </button>\n            </form>\n\n        </div>\n    )\n    \n}\n\nexport default AddNewTaskPage;","/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/TasksBoxMainMenuBar.js",["74","75","76"],[],"import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst TasksBoxMainMenuBar = ({ categories, priorities }) => {\n    const [newTask, setNewTask] = useState()\n\n    const navigate = useNavigate();\n\n    const addTask = () => {\n        navigate(\"/task/createNewTask\", {\n            state:{\n                categories: categories,\n                priorities: priorities\n            }\n        });\n        \n    }\n\n    return (\n        <div className=\"taskBoxMainMenuBar\">\n            <p>Categories</p>\n            <p>Targets</p>\n            <button className=\"addNewTaskButton\" onClick={addTask}>+</button>\n        </div>\n\n    )\n}\n\nexport default TasksBoxMainMenuBar;","/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/DropDownMenu.js",["77"],[],"import { useLocation } from \"react-router-dom\";\n\nconst DropDownMenu = ({ options, setValueFromDropDown }) => {\n    // const location = useLocation();\n    // const options = location.state.options;\n\n    const sendChoosenValueUp = (e) => {\n        e.preventDefault();\n        let choosenOption = e.target.value;\n        setValueFromDropDown(choosenOption);\n\n        \n    }\n\n    return(\n        <select onChange={e=>sendChoosenValueUp(e)} name=\"\" id=\"\">\n            <option value=\"\">--Please choose an option--</option>\n            {options.map(option =>\n                <option value={option}>{option}</option>)}\n            \n        </select>\n\n    )\n}\n\nexport default DropDownMenu;",{"ruleId":"78","severity":1,"message":"79","line":1,"column":10,"nodeType":"80","messageId":"81","endLine":1,"endColumn":19},{"ruleId":"78","severity":1,"message":"82","line":1,"column":21,"nodeType":"80","messageId":"81","endLine":1,"endColumn":29},{"ruleId":"78","severity":1,"message":"83","line":1,"column":10,"nodeType":"80","messageId":"81","endLine":1,"endColumn":21},{"ruleId":"78","severity":1,"message":"84","line":9,"column":11,"nodeType":"80","messageId":"81","endLine":9,"endColumn":37},{"ruleId":"78","severity":1,"message":"83","line":2,"column":10,"nodeType":"80","messageId":"81","endLine":2,"endColumn":21},{"ruleId":"78","severity":1,"message":"85","line":21,"column":12,"nodeType":"80","messageId":"81","endLine":21,"endColumn":28},{"ruleId":"78","severity":1,"message":"86","line":21,"column":30,"nodeType":"80","messageId":"81","endLine":21,"endColumn":49},{"ruleId":"78","severity":1,"message":"87","line":22,"column":12,"nodeType":"80","messageId":"81","endLine":22,"endColumn":29},{"ruleId":"78","severity":1,"message":"88","line":22,"column":31,"nodeType":"80","messageId":"81","endLine":22,"endColumn":51},{"ruleId":"78","severity":1,"message":"79","line":1,"column":10,"nodeType":"80","messageId":"81","endLine":1,"endColumn":19},{"ruleId":"78","severity":1,"message":"89","line":5,"column":12,"nodeType":"80","messageId":"81","endLine":5,"endColumn":19},{"ruleId":"78","severity":1,"message":"90","line":5,"column":21,"nodeType":"80","messageId":"81","endLine":5,"endColumn":31},{"ruleId":"78","severity":1,"message":"91","line":1,"column":10,"nodeType":"80","messageId":"81","endLine":1,"endColumn":21},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useNavigate' is defined but never used.","'onClickingTheCheckedButton' is assigned a value but never used.","'hasCollaborators' is assigned a value but never used.","'setHasCollaborators' is assigned a value but never used.","'taskCollaborators' is assigned a value but never used.","'setTaskCollaborators' is assigned a value but never used.","'newTask' is assigned a value but never used.","'setNewTask' is assigned a value but never used.","'useLocation' is defined but never used."]