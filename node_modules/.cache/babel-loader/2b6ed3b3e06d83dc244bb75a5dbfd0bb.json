{"ast":null,"code":"var _jsxFileName = \"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/WholeMainPageContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport AllTasksContainer from './AllTasksContainer';\nimport TasksBoxMainMenuBar from '../components/TasksBoxMainMenuBar';\nimport Menu from '../components/Menu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WholeMainPageContainer = _ref => {\n  _s();\n\n  let {\n    uncompletedTasks,\n    completedTasks,\n    categories,\n    priorities,\n    user\n  } = _ref;\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [categoriesTitles, setCategoriesTitles] = useState([]);\n  const [categoriesToDisplay, setCategoriesToDisplay] = useState(categoriesTitles);\n  const [prioritiesToDisplay, setPrioritiesToDisplay] = useState(priorities);\n  const [uncompletedTasksToDisplay, setUncompletedTasksToDisplay] = useState(uncompletedTasks);\n  const [completedTasksToDisplay, setCompletedTasksToDisplay] = useState(completedTasks);\n\n  const closeMenuFunction = () => {\n    setIsMenuOpen(false);\n  };\n\n  useEffect(() => {\n    let categoriesTitles = categories.map(category => category.title);\n    setCategoriesTitles(categoriesTitles);\n  }, [categories]);\n  useEffect(() => {\n    let uncompletedTaskToDisplayHelper = [];\n    let completedTaskToDisplayHelper = [];\n\n    for (let task of uncompletedTasks) {\n      if (categoriesToDisplay.includes(task.category.title) && prioritiesToDisplay.includes(task.priority)) {\n        console.log(\"This task is to be displayed\");\n        uncompletedTaskToDisplayHelper.push(task);\n        console.log(\"uncompletedTaskToDisplayHelper\", uncompletedTaskToDisplayHelper);\n      }\n    }\n\n    for (let task of completedTasks) {\n      if (categoriesToDisplay.includes(task.category.title) && prioritiesToDisplay.includes(task.priority)) {\n        console.log(\"This completed task is to be displayed\");\n        completedTaskToDisplayHelper.push(task);\n        console.log(\"completedTaskToDisplayHelper\", completedTaskToDisplayHelper);\n      }\n    }\n\n    setUncompletedTasksToDisplay(uncompletedTaskToDisplayHelper);\n    setCompletedTasksToDisplay(completedTaskToDisplayHelper);\n  }, [categoriesToDisplay, prioritiesToDisplay]);\n\n  const setPrioritiesFromDropDown = choosenOption => {\n    let prioritiesToDisplayHelper = [];\n\n    if (choosenOption) {\n      let choosenPriorities = Object.values(choosenOption);\n      console.log(\"priorities Chosen Option\", choosenOption);\n\n      for (let priority of choosenPriorities) {\n        if (priority.toDisplay) {\n          prioritiesToDisplayHelper.push(priority.value);\n        }\n      }\n\n      console.log(\"AfterPrioritiesToDisplayHelper\", prioritiesToDisplayHelper); ////////\n\n      setPrioritiesToDisplay(prioritiesToDisplayHelper);\n    }\n  };\n\n  const setCategoriesFromDropDown = choosenOption => {\n    let categoriesToDisplayHelper = [];\n\n    if (choosenOption) {\n      let choosenOptions = Object.values(choosenOption);\n      console.log(\"categories Chosen Option\", choosenOption);\n\n      for (let category of choosenOptions) {\n        if (category.toDisplay) {\n          categoriesToDisplayHelper.push(category.value);\n        }\n      }\n\n      console.log(\"AfterCategoriesToDisplayHelper\", categoriesToDisplayHelper); //////\n\n      setCategoriesToDisplay(categoriesToDisplayHelper);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isMenuOpen ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsMenuOpen(!isMenuOpen),\n        children: \"Menu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(Menu, {\n      closeMenuFunction: () => closeMenuFunction(),\n      categories: categories,\n      priorities: priorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TasksBoxMainMenuBar, {\n      categories: categories,\n      priorities: priorities,\n      categoriesTitles: categoriesTitles,\n      setPrioritiesFromDropDown: choosenOption => setPrioritiesFromDropDown(choosenOption),\n      setCategoriesFromDropDown: choosenOption => setCategoriesFromDropDown(choosenOption)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hello \", user.email, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AllTasksContainer, {\n      uncompletedTasksToDisplay: uncompletedTasksToDisplay,\n      completedTasksToDisplay: completedTasksToDisplay,\n      categories: categories,\n      priorities: priorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WholeMainPageContainer, \"F7++o6FbH8MMnW8n6lNuyLRhQ+U=\");\n\n_c = WholeMainPageContainer;\nexport default WholeMainPageContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"WholeMainPageContainer\");","map":{"version":3,"sources":["/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/WholeMainPageContainer.js"],"names":["useState","useEffect","AllTasksContainer","TasksBoxMainMenuBar","Menu","WholeMainPageContainer","uncompletedTasks","completedTasks","categories","priorities","user","isMenuOpen","setIsMenuOpen","categoriesTitles","setCategoriesTitles","categoriesToDisplay","setCategoriesToDisplay","prioritiesToDisplay","setPrioritiesToDisplay","uncompletedTasksToDisplay","setUncompletedTasksToDisplay","completedTasksToDisplay","setCompletedTasksToDisplay","closeMenuFunction","map","category","title","uncompletedTaskToDisplayHelper","completedTaskToDisplayHelper","task","includes","priority","console","log","push","setPrioritiesFromDropDown","choosenOption","prioritiesToDisplayHelper","choosenPriorities","Object","values","toDisplay","value","setCategoriesFromDropDown","categoriesToDisplayHelper","choosenOptions","email"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport AllTasksContainer from './AllTasksContainer';\nimport TasksBoxMainMenuBar from '../components/TasksBoxMainMenuBar';\nimport Menu from '../components/Menu';\n\nconst WholeMainPageContainer= ({ uncompletedTasks, completedTasks, categories, priorities, user }) => {\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n    const [categoriesTitles, setCategoriesTitles] = useState([]);\n\n    const [categoriesToDisplay, setCategoriesToDisplay] = useState(categoriesTitles);\n    const [prioritiesToDisplay, setPrioritiesToDisplay] = useState(priorities);\n    const [uncompletedTasksToDisplay, setUncompletedTasksToDisplay] = useState(uncompletedTasks);\n    const [completedTasksToDisplay, setCompletedTasksToDisplay] = useState(completedTasks);\n\n    const closeMenuFunction = () => {\n        setIsMenuOpen(false);\n    }\n\n    useEffect(() => {\n        let categoriesTitles = categories.map(category => (\n            category.title\n            ))\n        setCategoriesTitles(categoriesTitles)\n        \n        \n    }, [categories]);\n\n    useEffect(() => {\n        let uncompletedTaskToDisplayHelper = [];\n        let completedTaskToDisplayHelper = [];\n\n        for(let task of uncompletedTasks){\n            if(\n                categoriesToDisplay.includes(task.category.title)\n                &&\n                prioritiesToDisplay.includes(task.priority)\n                ){\n                console.log(\"This task is to be displayed\");\n                uncompletedTaskToDisplayHelper.push(task);\n                console.log(\"uncompletedTaskToDisplayHelper\", uncompletedTaskToDisplayHelper);\n            }\n        }\n\n        for(let task of completedTasks){\n            if(\n                categoriesToDisplay.includes(task.category.title)\n                &&\n                prioritiesToDisplay.includes(task.priority)\n                ){\n                console.log(\"This completed task is to be displayed\");\n                completedTaskToDisplayHelper.push(task);\n                console.log(\"completedTaskToDisplayHelper\", completedTaskToDisplayHelper);\n            }\n        }\n        setUncompletedTasksToDisplay(uncompletedTaskToDisplayHelper);\n        setCompletedTasksToDisplay(completedTaskToDisplayHelper);\n        \n    }, [categoriesToDisplay, prioritiesToDisplay]);\n\n\n    const setPrioritiesFromDropDown = (choosenOption) => {\n        let prioritiesToDisplayHelper = [];\n        if(choosenOption){\n            let choosenPriorities = Object.values(choosenOption);\n            console.log(\"priorities Chosen Option\", choosenOption);\n            for(let priority of choosenPriorities){\n                if(priority.toDisplay){\n                    prioritiesToDisplayHelper.push(priority.value);\n                }\n            }\n            console.log(\"AfterPrioritiesToDisplayHelper\", prioritiesToDisplayHelper);////////\n            setPrioritiesToDisplay(prioritiesToDisplayHelper);\n        }\n    }\n\n    const setCategoriesFromDropDown = (choosenOption) => {\n        let categoriesToDisplayHelper = [];\n        if(choosenOption){\n            let choosenOptions = Object.values(choosenOption)\n            console.log(\"categories Chosen Option\", choosenOption);\n            for(let category of choosenOptions){\n                if(category.toDisplay){\n                    categoriesToDisplayHelper.push(category.value);\n                }\n            }\n            console.log(\"AfterCategoriesToDisplayHelper\", categoriesToDisplayHelper);//////\n            setCategoriesToDisplay(categoriesToDisplayHelper);\n        }\n    }\n\n    return (\n        <div>\n            {!isMenuOpen?\n                <>\n                    <button onClick={()=>setIsMenuOpen(!isMenuOpen)}>Menu</button>\n                </>\n            :\n                <Menu\n                    closeMenuFunction={ ()=>closeMenuFunction() }\n                    categories={ categories }\n                    priorities={ priorities }\n                />\n            }\n            <TasksBoxMainMenuBar \n                categories={ categories }\n                priorities={ priorities }\n                categoriesTitles={ categoriesTitles }\n                setPrioritiesFromDropDown={(choosenOption)=> setPrioritiesFromDropDown(choosenOption) }\n                setCategoriesFromDropDown={(choosenOption)=> setCategoriesFromDropDown(choosenOption) }\n            />\n            <p>Hello {user.email} </p>\n            <AllTasksContainer \n                uncompletedTasksToDisplay={ uncompletedTasksToDisplay } \n                completedTasksToDisplay={ completedTasksToDisplay }\n                categories={ categories }\n                priorities={ priorities }\n            />\n\n        </div>\n    )\n}\n\nexport default WholeMainPageContainer;"]},"metadata":{},"sourceType":"module"}