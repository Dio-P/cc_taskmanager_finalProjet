{"ast":null,"code":"var _jsxFileName = \"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/WholeMainPageContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport AllTasksContainer from './AllTasksContainer';\nimport TasksBoxMainMenuBar from '../components/TasksBoxMainMenuBar';\nimport Menu from '../components/Menu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WholeMainPageContainer = _ref => {\n  _s();\n\n  let {\n    uncompletedTasks,\n    completedTasks,\n    categories,\n    priorities,\n    user\n  } = _ref;\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [categoriesToDisplay, setCategoriesToDisplay] = useState([]);\n  const [prioritiesToDisplay, setPrioritiesToDisplay] = useState([]);\n  const [uncompletedTasksToDisplay, setUncompletedTasksToDisplay] = useState([]);\n  const [completedTasksToDisplay, setCompletedTasksToDisplay] = useState([]);\n  const [prioritiesToDisplayHelper, setPrioritiesToDisplayHelper] = useState([]);\n  const [categoriesToDisplayHelper, setCategoriesToDisplayHelper] = useState([]);\n  useEffect(() => {\n    setCategoriesToDisplay(categoriesToDisplayHelper.map(categoryToDisplayObject => categoryToDisplayObject.option));\n  }, [categoriesToDisplayHelper]);\n  useEffect(() => {\n    setPrioritiesToDisplay(prioritiesToDisplayHelper.map(priorityToDisplayObject => priorityToDisplayObject.option));\n  }, [prioritiesToDisplayHelper]);\n\n  const closeMenuFunction = () => {\n    setIsMenuOpen(false);\n  };\n\n  const setPrioritiesFromDropDown = choosenOption => {\n    if (choosenOption.toDisplay) {\n      setPrioritiesToDisplayHelper([...prioritiesToDisplayHelper, choosenOption]);\n    } else {\n      setPrioritiesToDisplayHelper(prioritiesToDisplayHelper.filter(priorityInArray => priorityInArray !== choosenOption));\n    }\n  };\n\n  const setCategoriesFromDropDown = choosenOption => {\n    if (choosenOption.toDisplay) {\n      setCategoriesToDisplayHelper([...categoriesToDisplayHelper, choosenOption]);\n    } else {\n      setCategoriesToDisplayHelper(categoriesToDisplayHelper.filter(priorityInArray => priorityInArray !== choosenOption));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isMenuOpen ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsMenuOpen(!isMenuOpen),\n        children: \"Menu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(Menu, {\n      closeMenuFunction: () => closeMenuFunction(),\n      categories: categories,\n      priorities: priorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TasksBoxMainMenuBar, {\n      categories: categories,\n      priorities: priorities,\n      setPrioritiesFromDropDown: choosenOption => setPrioritiesFromDropDown(choosenOption),\n      setCategoriesFromDropDown: choosenOption => setCategoriesFromDropDown(choosenOption)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hello \", user.email, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AllTasksContainer, {\n      uncompletedTasksToDisplay: uncompletedTasks,\n      completedTasksToDisplay: completedTasks,\n      categories: categories,\n      priorities: priorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WholeMainPageContainer, \"L3W2c3+XI2omZ8m8Y6s63iC+8aA=\");\n\n_c = WholeMainPageContainer;\nexport default WholeMainPageContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"WholeMainPageContainer\");","map":{"version":3,"sources":["/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/WholeMainPageContainer.js"],"names":["useState","useEffect","AllTasksContainer","TasksBoxMainMenuBar","Menu","WholeMainPageContainer","uncompletedTasks","completedTasks","categories","priorities","user","isMenuOpen","setIsMenuOpen","categoriesToDisplay","setCategoriesToDisplay","prioritiesToDisplay","setPrioritiesToDisplay","uncompletedTasksToDisplay","setUncompletedTasksToDisplay","completedTasksToDisplay","setCompletedTasksToDisplay","prioritiesToDisplayHelper","setPrioritiesToDisplayHelper","categoriesToDisplayHelper","setCategoriesToDisplayHelper","map","categoryToDisplayObject","option","priorityToDisplayObject","closeMenuFunction","setPrioritiesFromDropDown","choosenOption","toDisplay","filter","priorityInArray","setCategoriesFromDropDown","email"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport AllTasksContainer from './AllTasksContainer';\nimport TasksBoxMainMenuBar from '../components/TasksBoxMainMenuBar';\nimport Menu from '../components/Menu';\n\nconst WholeMainPageContainer= ({ uncompletedTasks, completedTasks, categories, priorities, user }) => {\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n    const [categoriesToDisplay, setCategoriesToDisplay] = useState([]);\n    const [prioritiesToDisplay, setPrioritiesToDisplay] = useState([]);\n    const [uncompletedTasksToDisplay, setUncompletedTasksToDisplay] = useState([]);\n    const [completedTasksToDisplay, setCompletedTasksToDisplay] = useState([]);\n\n    const [prioritiesToDisplayHelper, setPrioritiesToDisplayHelper] = useState([]);\n    const [categoriesToDisplayHelper, setCategoriesToDisplayHelper] = useState([]);\n\n    useEffect(() => {\n        setCategoriesToDisplay(categoriesToDisplayHelper.map(\n            categoryToDisplayObject => categoryToDisplayObject.option\n            ))\n        \n    }, [categoriesToDisplayHelper]);\n\n    useEffect(() => {\n        setPrioritiesToDisplay(prioritiesToDisplayHelper.map(\n            priorityToDisplayObject => priorityToDisplayObject.option\n        ))\n        \n    }, [prioritiesToDisplayHelper]);\n\n    const closeMenuFunction = () => {\n        setIsMenuOpen(false);\n    }\n\n    const setPrioritiesFromDropDown = (choosenOption) => {\n        if(choosenOption.toDisplay){\n            setPrioritiesToDisplayHelper([...prioritiesToDisplayHelper, choosenOption]);\n        }else{\n            setPrioritiesToDisplayHelper(prioritiesToDisplayHelper.filter(\n                priorityInArray => priorityInArray !== choosenOption\n                ))\n        }\n        \n    }\n\n    const setCategoriesFromDropDown = (choosenOption) => {\n        if(choosenOption.toDisplay){\n            setCategoriesToDisplayHelper([...categoriesToDisplayHelper, choosenOption]);\n        }else{\n            setCategoriesToDisplayHelper(categoriesToDisplayHelper.filter(\n                priorityInArray => priorityInArray !== choosenOption\n                ))\n        }\n    }\n\n    return (\n        <div>\n            {!isMenuOpen?\n                <>\n                    <button onClick={()=>setIsMenuOpen(!isMenuOpen)}>Menu</button>\n                </>\n            :\n                <Menu\n                    closeMenuFunction={ ()=>closeMenuFunction() }\n                    categories={ categories }\n                    priorities={ priorities }\n                />\n            }\n            <TasksBoxMainMenuBar \n                categories={ categories }\n                priorities={ priorities }\n                setPrioritiesFromDropDown={(choosenOption)=> setPrioritiesFromDropDown(choosenOption) }\n                setCategoriesFromDropDown={(choosenOption)=> setCategoriesFromDropDown(choosenOption) }\n            />\n            <p>Hello {user.email} </p>\n            <AllTasksContainer \n                uncompletedTasksToDisplay={ uncompletedTasks } \n                completedTasksToDisplay={ completedTasks }\n                categories={ categories }\n                priorities={ priorities }\n            />\n\n        </div>\n    )\n}\n\nexport default WholeMainPageContainer;"]},"metadata":{},"sourceType":"module"}