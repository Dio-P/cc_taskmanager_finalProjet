{"ast":null,"code":"var _jsxFileName = \"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/MultipleOptionsDropdown.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MultipleOptionsDropdown = _ref => {\n  _s();\n\n  let {\n    options,\n    setOptionsFromDropDown\n  } = _ref;\n  const [option, setOption] = useState();\n  const [toDisplay, setToDisplay] = useState();\n  const [optionshandler, setOptionshandler] = useState(null);\n  useEffect(() => {\n    const optionshandlerHelper = {};\n\n    if (options) {\n      for (let option of options) {\n        optionshandlerHelper[option] = {\n          value: option,\n          toDisplay: true,\n          checked: true\n        };\n      }\n\n      console.log(\"optionshandler\", optionshandler);\n      setOptionshandler({ ...optionshandler,\n        ...optionshandlerHelper\n      });\n    }\n  }, []);\n  useEffect(() => {\n    console.log(\"optionshandler\", optionshandler);\n  }, [optionshandler]);\n  useEffect(() => {\n    console.log(\"optionObject\", {\n      option: option,\n      toDisplay: toDisplay\n    });\n    setOptionsFromDropDown({\n      option: option,\n      toDisplay: toDisplay\n    });\n  }, [option, toDisplay]);\n\n  const onClick = e => {\n    setOption(e.target.value); // setToDisplay(()=>!toDisplay)\n\n    setOptionshandler({ ...optionshandler,\n      [option]: {\n        value: option,\n        toDisplay: !optionshandler[option].toDisplay,\n        checked: !optionshandler[option].checked\n      }\n    });\n    optionshandler[option].checked = !optionshandler.option.checked;\n    e.checked = !e.checked;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: optionshandler ? options.map(option => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onClick: e => onClick(e),\n        checked: optionshandler[option].checked,\n        value: option\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }, this), option]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }, this)) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MultipleOptionsDropdown, \"wL50CvVFc/J2QbgLLJ1Zn2ggE54=\");\n\n_c = MultipleOptionsDropdown;\nexport default MultipleOptionsDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultipleOptionsDropdown\");","map":{"version":3,"sources":["/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/MultipleOptionsDropdown.js"],"names":["useState","useEffect","MultipleOptionsDropdown","options","setOptionsFromDropDown","option","setOption","toDisplay","setToDisplay","optionshandler","setOptionshandler","optionshandlerHelper","value","checked","console","log","onClick","e","target","map"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,MAAMC,uBAAuB,GAAG,QAAyC;AAAA;;AAAA,MAAxC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAwC;AACrE,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,EAApC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,EAA1C;AAEA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,IAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,oBAAoB,GAAG,EAA7B;;AACA,QAAGR,OAAH,EAAW;AACP,WAAI,IAAIE,MAAR,IAAkBF,OAAlB,EAA0B;AACtBQ,QAAAA,oBAAoB,CAACN,MAAD,CAApB,GAA8B;AACdO,UAAAA,KAAK,EAAEP,MADO;AAEdE,UAAAA,SAAS,EAAE,IAFG;AAGdM,UAAAA,OAAO,EAAE;AAHK,SAA9B;AAKH;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BN,cAA9B;AACAC,MAAAA,iBAAiB,CAAC,EAAC,GAAGD,cAAJ;AAAoB,WAAGE;AAAvB,OAAD,CAAjB;AACH;AACJ,GAbQ,EAaN,EAbM,CAAT;AAeAV,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BN,cAA9B;AAEH,GAHQ,EAGN,CAACA,cAAD,CAHM,CAAT;AAKAR,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B;AAACV,MAAAA,MAAM,EAAEA,MAAT;AAAiBE,MAAAA,SAAS,EAAEA;AAA5B,KAA5B;AACAH,IAAAA,sBAAsB,CAAC;AAACC,MAAAA,MAAM,EAAEA,MAAT;AAAiBE,MAAAA,SAAS,EAAEA;AAA5B,KAAD,CAAtB;AAEH,GAJQ,EAIN,CAACF,MAAD,EAASE,SAAT,CAJM,CAAT;;AAMA,QAAMS,OAAO,GAAIC,CAAD,IAAO;AACnBX,IAAAA,SAAS,CAACW,CAAC,CAACC,MAAF,CAASN,KAAV,CAAT,CADmB,CAEnB;;AACAF,IAAAA,iBAAiB,CAAC,EACd,GAAGD,cADW;AAEd,OAACJ,MAAD,GAAU;AACNO,QAAAA,KAAK,EAAEP,MADD;AAENE,QAAAA,SAAS,EAAE,CAACE,cAAc,CAACJ,MAAD,CAAd,CAAuBE,SAF7B;AAGNM,QAAAA,OAAO,EAAE,CAACJ,cAAc,CAACJ,MAAD,CAAd,CAAuBQ;AAH3B;AAFI,KAAD,CAAjB;AASAJ,IAAAA,cAAc,CAACJ,MAAD,CAAd,CAAuBQ,OAAvB,GAAiC,CAACJ,cAAc,CAACJ,MAAf,CAAsBQ,OAAxD;AACAI,IAAAA,CAAC,CAACJ,OAAF,GAAU,CAACI,CAAC,CAACJ,OAAb;AACH,GAdD;;AAiBA,sBACI;AAAA,cACKJ,cAAc,GACXN,OAAO,CAACgB,GAAR,CAAYd,MAAM,iBACd;AAAA,8BAAI;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,OAAO,EAAGY,CAAD,IAAMD,OAAO,CAACC,CAAD,CAA7C;AAAkD,QAAA,OAAO,EAAER,cAAc,CAACJ,MAAD,CAAd,CAAuBQ,OAAlF;AAA2F,QAAA,KAAK,EAAER;AAAlG;AAAA;AAAA;AAAA;AAAA,cAAJ,EAAiHA,MAAjH;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADW,GAMX;AAPR;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CA/DD;;GAAMH,uB;;KAAAA,uB;AAiEN,eAAeA,uBAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst MultipleOptionsDropdown = ({ options, setOptionsFromDropDown }) => {\n    const [option, setOption] = useState();\n    const [toDisplay, setToDisplay] = useState();\n\n    const [optionshandler, setOptionshandler] = useState(null);\n\n    useEffect(() => {\n        const optionshandlerHelper = {};\n        if(options){\n            for(let option of options){\n                optionshandlerHelper[option]= {\n                                value: option,\n                                toDisplay: true,\n                                checked: true\n                            }\n            }\n            console.log(\"optionshandler\", optionshandler);\n            setOptionshandler({...optionshandler, ...optionshandlerHelper});\n        }   \n    }, []);\n\n    useEffect(() => {\n        console.log(\"optionshandler\", optionshandler);\n        \n    }, [optionshandler]);\n\n    useEffect(() => {\n        console.log(\"optionObject\", {option: option, toDisplay: toDisplay});\n        setOptionsFromDropDown({option: option, toDisplay: toDisplay})\n\n    }, [option, toDisplay]);\n\n    const onClick = (e) => {\n        setOption(e.target.value)\n        // setToDisplay(()=>!toDisplay)\n        setOptionshandler({\n            ...optionshandler,\n            [option]: {\n                value: option,\n                toDisplay: !optionshandler[option].toDisplay,\n                checked: !optionshandler[option].checked\n            }\n            \n        })\n        optionshandler[option].checked = !optionshandler.option.checked;\n        e.checked=!e.checked\n    }\n\n    \n    return(\n        <ul>\n            {optionshandler?\n                options.map(option => (\n                    <li><input type=\"checkbox\" onClick={(e)=> onClick(e)} checked={optionshandler[option].checked} value={option} />{option}</li>\n                    \n                ))\n            :\n                null\n            }\n            \n\n        </ul>\n    )\n}\n\nexport default MultipleOptionsDropdown;"]},"metadata":{},"sourceType":"module"}