{"ast":null,"code":"var _jsxFileName = \"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/Task.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport RequestContext from \"../context/RequestContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Task = _ref => {\n  _s();\n\n  let {\n    task,\n    categories,\n    priorities,\n    updateWholeMainPageStateFromComponent\n  } = _ref;\n  const navigate = useNavigate(); // const location = useLocation();\n  // const task = location.state.task;\n  // const categories = location.state.categories;\n  // const priorities = location.state.priorities;\n  // const [loading, setLoading] = useState(true);\n  // const [isMenuOpen, setIsMenuOpen] = useState(false);\n  // const [editTitle, setEditTitle] = useState(false);\n  // const [taskTitle, setTaskTitle] = useState(task.title);\n\n  const [taskCompleted, setTaskCompleted] = useState(task.completed); ///////////\n\n  const [taskTitle, setTaskTitle] = useState(task.title);\n  const [taskID, setTaskID] = useState(task.id);\n  const [taskCategory, setTaskCategory] = useState(task.category);\n  const [taskPriority, setTaskPriority] = useState(task.priority);\n  const [taskDescription, setTaskDescription] = useState(task.description);\n  const [taskDate, setTaskDate] = useState(task.date);\n  const [taskTime, setTaskTime] = useState(task.time);\n  const [datedTaskType, setDatedTaskType] = useState(task.type);\n  const [completedTimeStamp, setCompletedTimeStamp] = useState(null);\n  const [taskDuration, setTaskDuration] = useState(task.duration);\n  const [taskCollaborators, setTaskCollaborators] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false); // const [collaboratorsToDisplay, setCollaboratorsToDisplay] = useState([]);\n  // const [searchInput, setSearchInput] = useState(\"\");\n\n  const {\n    get,\n    post,\n    put\n  } = useContext(RequestContext); // useEffect(() => {\n  //     setTaskCompleted(task.completed);\n  // }, [task]);\n\n  useEffect(() => {\n    setIsLoaded(true);\n  }, []);\n  useEffect(() => {\n    onClickingDone();\n  }, [taskCompleted]);\n\n  const onClickingDone = () => {\n    if (!isLoaded) {\n      return;\n    }\n\n    const updatedTask = {};\n    updatedTask[\"title\"] = taskTitle;\n    updatedTask[\"category\"] = taskCategory;\n    updatedTask[\"priority\"] = taskPriority;\n    updatedTask[\"completed\"] = taskCompleted;\n    updatedTask[\"completedTimeStamp\"] = completedTimeStamp;\n    console.log(\"completedTimeStamp\", completedTimeStamp);\n    updatedTask[\"id\"] = taskID;\n\n    if (taskDescription) {\n      updatedTask[\"description\"] = taskDescription;\n    }\n\n    if (taskDate) {\n      updatedTask[\"date\"] = taskDate;\n      updatedTask[\"type\"] = datedTaskType;\n    } else {\n      updatedTask[\"type\"] = \"SOMEDAY\";\n    }\n\n    if (taskTime) {\n      updatedTask[\"time\"] = taskTime;\n    }\n\n    if (taskDuration) {\n      updatedTask[\"duration\"] = taskDuration;\n    }\n\n    console.log(\"updatedTask\", updatedTask); /////////////\n\n    console.log(\"task.id\", task.id); /////////////\n\n    put(`tasks/${task.id}`, updatedTask);\n    updateWholeMainPageStateFromComponent(updatedTask); // redirect to home page            \n  };\n\n  useEffect(() => {\n    if (!isLoaded) {\n      return;\n    }\n\n    setTaskCompleted(!taskCompleted);\n  }, [completedTimeStamp]);\n\n  const onCheckboxClick = () => {\n    // let timestamp = Date.parse(new Date());\n    // console.log(\"timestamp\", timestamp);  \n    if (!completedTimeStamp) {\n      let timestamp = Date.parse(new Date());\n      setCompletedTimeStamp(timestamp); // onClickingDone()\n    } else {\n      setCompletedTimeStamp(null); // onClickingDone()\n    } // setTaskCompleted(!taskCompleted);\n\n  };\n\n  const onTaskClick = e => {\n    navigate(`/task/:${task.title}`, {\n      state: {\n        task: task,\n        categories: categories,\n        priorities: priorities\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"task\",\n      name: \"task\",\n      checked: taskCompleted,\n      onClick: () => onCheckboxClick()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"task\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onTaskClick,\n        children: task.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 40\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Task, \"GHhKQRnZmvxd7hGimQEwvzgqyuE=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Task;\nexport default Task;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/Task.js"],"names":["useState","useEffect","useContext","useNavigate","RequestContext","Task","task","categories","priorities","updateWholeMainPageStateFromComponent","navigate","taskCompleted","setTaskCompleted","completed","taskTitle","setTaskTitle","title","taskID","setTaskID","id","taskCategory","setTaskCategory","category","taskPriority","setTaskPriority","priority","taskDescription","setTaskDescription","description","taskDate","setTaskDate","date","taskTime","setTaskTime","time","datedTaskType","setDatedTaskType","type","completedTimeStamp","setCompletedTimeStamp","taskDuration","setTaskDuration","duration","taskCollaborators","setTaskCollaborators","isLoaded","setIsLoaded","get","post","put","onClickingDone","updatedTask","console","log","onCheckboxClick","timestamp","Date","parse","onTaskClick","e","state"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport RequestContext from \"../context/RequestContext\";\n\nconst Task = ({ task, categories, priorities, updateWholeMainPageStateFromComponent }) => {\n    const navigate = useNavigate();\n    // const location = useLocation();\n    // const task = location.state.task;\n    // const categories = location.state.categories;\n    // const priorities = location.state.priorities;\n\n    // const [loading, setLoading] = useState(true);\n    // const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n    // const [editTitle, setEditTitle] = useState(false);\n    // const [taskTitle, setTaskTitle] = useState(task.title);\n    \n    const [taskCompleted, setTaskCompleted] = useState(task.completed);///////////\n\n    const [taskTitle, setTaskTitle] = useState(task.title);\n    const [taskID, setTaskID] = useState(task.id);\n    const [taskCategory, setTaskCategory] = useState(task.category);\n    const [taskPriority, setTaskPriority] = useState(task.priority);\n    const [taskDescription, setTaskDescription] = useState(task.description);\n    const [taskDate, setTaskDate] = useState(task.date);\n    const [taskTime, setTaskTime] = useState(task.time);\n    const [datedTaskType, setDatedTaskType] = useState(task.type);\n    const [completedTimeStamp, setCompletedTimeStamp] = useState(null);\n    const [taskDuration, setTaskDuration] = useState(task.duration);\n    const [taskCollaborators, setTaskCollaborators] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    // const [collaboratorsToDisplay, setCollaboratorsToDisplay] = useState([]);\n    // const [searchInput, setSearchInput] = useState(\"\");\n\n    const {get, post, put} = useContext(RequestContext);\n\n\n    // useEffect(() => {\n    //     setTaskCompleted(task.completed);\n        \n    // }, [task]);\n\n    useEffect(() => {\n        setIsLoaded(true);\n        \n    }, []);\n\n    useEffect(() => {\n        onClickingDone()\n    }, [taskCompleted]);\n\n    const onClickingDone = () => {\n        if(!isLoaded){\n            return\n        }\n        const updatedTask= { }\n        updatedTask[\"title\"] = taskTitle;\n        updatedTask[\"category\"] = taskCategory;\n        updatedTask[\"priority\"] = taskPriority;\n        updatedTask[\"completed\"] = taskCompleted;\n        updatedTask[\"completedTimeStamp\"] = completedTimeStamp;\n        console.log(\"completedTimeStamp\", completedTimeStamp);\n        updatedTask[\"id\"] = taskID;\n\n\n        if(taskDescription){\n            updatedTask[\"description\"]=taskDescription;\n        }\n        if(taskDate){\n            updatedTask[\"date\"]=taskDate;\n            updatedTask[\"type\"]=datedTaskType;\n        }else{\n            updatedTask[\"type\"]=\"SOMEDAY\";\n\n        }\n        if(taskTime){\n            updatedTask[\"time\"]=taskTime;\n        }\n        if(taskDuration){\n            updatedTask[\"duration\"]=taskDuration;\n        }\n        \n        console.log(\"updatedTask\", updatedTask);/////////////\n        console.log(\"task.id\", task.id);/////////////\n        \n        put(`tasks/${task.id}`, updatedTask)\n        updateWholeMainPageStateFromComponent(updatedTask)\n        // redirect to home page            \n    }\n\n    useEffect(() => {\n        if(!isLoaded){\n            return\n        }\n        setTaskCompleted(!taskCompleted);\n        \n    }, [completedTimeStamp]);\n\n    const onCheckboxClick= () => {\n        // let timestamp = Date.parse(new Date());\n        // console.log(\"timestamp\", timestamp);  \n        if(!completedTimeStamp){\n            let timestamp = Date.parse(new Date());\n            setCompletedTimeStamp(timestamp);\n            // onClickingDone()\n        }else{\n            setCompletedTimeStamp(null);\n            // onClickingDone()\n        }\n        // setTaskCompleted(!taskCompleted);\n        \n    }\n\n    const onTaskClick = (e) => {\n        navigate(`/task/:${task.title}`, {\n            state: {\n                task:task,\n                categories:categories,\n                priorities: priorities,\n            }\n        })\n    }\n\n    return (\n            <div>\n                <input type=\"checkbox\" id=\"task\" name=\"task\" checked={taskCompleted} onClick={()=>onCheckboxClick()}/>\n                <label htmlFor=\"task\"> <button onClick={onTaskClick}>{ task.title }</button> </label>\n            </div>\n      )\n}\n\nexport default Task;\n"]},"metadata":{},"sourceType":"module"}