{"ast":null,"code":"var _jsxFileName = \"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/AllGoalsContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Goal from \"../components/Goal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AllGoalsContainer = _ref => {\n  _s();\n\n  let {\n    categories,\n    priorities,\n    goals\n  } = _ref;\n  const [goalEndDate, setGoalEndDate] = useState(null);\n\n  const findDaysAfter = goal => {\n    console.log(\"within find days after\");\n\n    if (goal.type === \"DAILY\") {\n      console.log(\"of daily type\"); ///////\n\n      console.log(\"1 to be returned\"); ///////\n\n      return 1;\n    }\n\n    if (goal.type === \"WEEKLY\") {\n      console.log(\"of weekly type\"); ///////\n\n      console.log(\"7 to be returned\"); ///////\n\n      return 7;\n    }\n\n    if (goal.type === \"MONTHLY\") {\n      // return 30;\n      console.log(\"of monthly type\"); ///////\n\n      console.log(\"monthly to be returned\"); ///////\n\n      return \"MONTHLY\";\n    }\n  };\n\n  const findGoalEndDate = goal => {\n    console.log(\"within find goals end date\");\n    let daysAfter = findDaysAfter(goal);\n    let goalStartDate = goal.startDate;\n    let endDate = new Date(goalStartDate.split(\"/\"));\n    const options = {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\"\n    };\n\n    if (goalStartDate && daysAfter) {\n      if (daysAfter === \"MONTHLY\") {\n        console.log('goalStartDate.splilt(\"/\")', goalStartDate.split(\"/\").reverse().toString());\n        console.log(\"start Date Month\", endDate);\n        console.log(\"getMonth\", endDate.getMonth());\n        endDate.setMonth(endDate.getMonth() + 1);\n        console.log(\"startDateMonth\", goalStartDate); //////////////\n\n        console.log(\"endDateMonth\", endDate.toLocaleDateString('en-GB', options)); //////////////\n\n        return endDate.toLocaleDateString();\n      } else {\n        console.log(\"start Date\", endDate);\n        console.log(\"daysAfter\", daysAfter);\n        console.log(\"getDay\", endDate.getDate());\n        endDate.setDate(endDate.getDate() + daysAfter);\n        console.log(\"startDate\", goalStartDate); //////////////\n\n        console.log(\"endDate\", endDate.toLocaleDateString('en-GB', options)); //////////////\n\n        return endDate.toLocaleDateString();\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: goals.map(goal => /*#__PURE__*/_jsxDEV(Goal, {\n      goal: goal,\n      endDate: findGoalEndDate(goal),\n      categories: categories,\n      priorities: priorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AllGoalsContainer, \"j6xvshJ7OU1Gr6tX36iS+S4tScc=\");\n\n_c = AllGoalsContainer;\nexport default AllGoalsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllGoalsContainer\");","map":{"version":3,"sources":["/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/AllGoalsContainer.js"],"names":["useState","Goal","AllGoalsContainer","categories","priorities","goals","goalEndDate","setGoalEndDate","findDaysAfter","goal","console","log","type","findGoalEndDate","daysAfter","goalStartDate","startDate","endDate","Date","split","options","year","month","day","reverse","toString","getMonth","setMonth","toLocaleDateString","getDate","setDate","map"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport Goal from \"../components/Goal\"\n\nconst AllGoalsContainer = ( {categories, priorities, goals} ) => {\n    const [goalEndDate, setGoalEndDate] = useState(null);\n\n    const findDaysAfter = (goal) => {\n        console.log(\"within find days after\");\n        if(goal.type===\"DAILY\"){\n            console.log(\"of daily type\");///////\n            console.log(\"1 to be returned\");///////\n            return 1;\n\n        }if(goal.type===\"WEEKLY\"){\n            console.log(\"of weekly type\");///////\n            console.log(\"7 to be returned\");///////\n            return 7;\n            \n        }if(goal.type===\"MONTHLY\"){\n            // return 30;\n            console.log(\"of monthly type\");///////\n            console.log(\"monthly to be returned\");///////\n            return \"MONTHLY\";\n            \n        } \n    }\n\n    const findGoalEndDate = (goal) => {\n        console.log(\"within find goals end date\");\n        let daysAfter = findDaysAfter(goal);\n        let goalStartDate = goal.startDate;\n        let endDate = new Date(goalStartDate.split(\"/\"));\n        const options = { year: \"numeric\", month: \"numeric\", day: \"numeric\" }; \n        if(goalStartDate && daysAfter){\n            if(daysAfter===\"MONTHLY\"){\n                console.log('goalStartDate.splilt(\"/\")', goalStartDate.split(\"/\").reverse().toString());\n                console.log(\"start Date Month\", endDate);\n                console.log(\"getMonth\", endDate.getMonth());\n                endDate.setMonth(endDate.getMonth() + 1);\n                console.log(\"startDateMonth\", goalStartDate);//////////////\n                console.log(\"endDateMonth\", endDate.toLocaleDateString('en-GB',options));//////////////\n                return endDate.toLocaleDateString();\n\n            }else{\n                console.log(\"start Date\", endDate);\n                console.log(\"daysAfter\", daysAfter);\n                console.log(\"getDay\", endDate.getDate());\n                endDate.setDate(endDate.getDate() + daysAfter);\n                console.log(\"startDate\", goalStartDate);//////////////\n                console.log(\"endDate\", endDate.toLocaleDateString('en-GB', options));//////////////\n                return endDate.toLocaleDateString();\n\n            }\n        }\n    }\n\n    return(\n        <div>\n            { goals.map(goal => (\n                <Goal\n                goal={ goal }\n                endDate={ findGoalEndDate(goal) }\n                categories={ categories }\n                priorities={ priorities }\n                />\n            )) }\n        </div>\n\n    )\n}\n\nexport default AllGoalsContainer"]},"metadata":{},"sourceType":"module"}