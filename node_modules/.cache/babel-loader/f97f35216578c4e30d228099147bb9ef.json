{"ast":null,"code":"var _jsxFileName = \"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/Goal.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Goal = _ref => {\n  _s();\n\n  let {\n    goal,\n    categories,\n    priorities\n  } = _ref;\n  const [goalTitle, setGoalTitle] = useState(null);\n  const [goalTarget, setGoalTarget] = useState(null);\n  const [goalStartDate, setGoalStartDate] = useState(null);\n  const [goalEndDate, setGoalEndDate] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [allTaskGivenPeriod, setAllTaskGivenPeriod] = useState(null);\n  const [allCategoryTaskGivenPeriod, setAllCategoryTaskGivenPeriod] = useState(null);\n  const [tasksOnTarget, setTasksOnTarget] = useState(null);\n  const [goalTask, setGoalTask] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    calculatingTargetOutcome();\n    findGoalEndDate(goal);\n  }, []); // useEffect(() => {\n  //     calculatingTargetOutcome();\n  // }, [goalStartDate]);\n\n  useEffect(() => {\n    setLoading(false);\n  }, [goalTitle, goalTarget, goalStartDate, goalEndDate]);\n  useEffect(() => {\n    setGoalTitle(goal.title);\n    setGoalTarget(goal.target);\n    setGoalStartDate(goal.startDate);\n  }, [goal]);\n  useEffect(() => {\n    calculatingTargetOutcome();\n  }, [goalEndDate]);\n\n  const findDaysAfter = goal => {\n    console.log(\"within find days after\");\n\n    if (goal.type === \"DAILY\") {\n      console.log(\"of daily type\"); ///////\n\n      console.log(\"1 to be returned\"); ///////\n\n      return 1;\n    }\n\n    if (goal.type === \"WEEKLY\") {\n      console.log(\"of weekly type\"); ///////\n\n      console.log(\"7 to be returned\"); ///////\n\n      return 7;\n    }\n\n    if (goal.type === \"MONTHLY\") {\n      // return 30;\n      console.log(\"of monthly type\"); ///////\n\n      console.log(\"monthly to be returned\"); ///////\n\n      return \"MONTHLY\";\n    }\n  };\n\n  const findGoalEndDate = goal => {\n    console.log(\"within find goals end date\"); //////////\n\n    let daysAfter = findDaysAfter(goal);\n    let goalStartDate = goal.startDate;\n    let endDate = new Date(goalStartDate.split(\"/\").reverse().toString()); // const options = { year: \"numeric\", month: \"numeric\", day: \"numeric\" }; \n\n    console.log(\"endDate\", endDate); //////////\n\n    if (goalStartDate && daysAfter) {\n      if (daysAfter === \"MONTHLY\") {\n        // console.log('goalStartDate.splilt(\"/\")', goalStartDate.split(\"/\").reverse().toString());\n        // console.log(\"start Date Month\", endDate);\n        // console.log(\"getMonth\", endDate.getMonth());\n        endDate.setMonth(endDate.getMonth() + 1); // console.log(\"startDateMonth\", goalStartDate);//////////////\n        // console.log(\"endDateMonth\", endDate.toLocaleDateString('en-GB',options));//////////////\n\n        setGoalEndDate(endDate.toLocaleDateString());\n      } else {\n        // console.log(\"start Date\", endDate);\n        // console.log(\"daysAfter\", daysAfter);\n        // console.log(\"getDay\", endDate.getDate());\n        endDate.setDate(endDate.getDate() + daysAfter); // console.log(\"startDate\", goalStartDate);//////////////\n        // console.log(\"endDate\", endDate.toLocaleDateString('en-GB', options));//////////////\n\n        setGoalEndDate(endDate.toLocaleDateString());\n      }\n    }\n  };\n\n  const onGoalClick = e => {\n    console.log(\"a goal has been clicked\", goal); /////////\n\n    navigate(`/goal/:${goal.title}`, {\n      state: {\n        goal: goal,\n        categories: categories,\n        priorities: priorities,\n        endDate: goalEndDate\n      }\n    });\n  };\n\n  const calculatingTargetOutcome = () => {\n    let dateNow = Date.parse(new Date()); // console.log(\"endDate\", goalEndDate);//////////\n\n    let dateEnd = Date.parse(new Date(goalEndDate.split(\"/\").reverse()));\n    console.log(\"dateEnd\", dateEnd); //////////////\n\n    if (dateNow <= dateEnd) {\n      console.log(\"penidng\"); ////////////\n\n      return \"penidng\";\n    } else {\n      if (tasksOnTarget >= goalTask) {\n        console.log(\"succeeded\"); //////////\n\n        return \"succeeded\";\n      } else {\n        console.log(\"failed\"); ///////\n\n        return \"failed\";\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onGoalClick,\n      children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Goal Title \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", goalTitle, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Goal Start Date \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", goalStartDate, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Goal End Date \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", goalEndDate, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Goal Target \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", goalTarget, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true), \"See Goal Details \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Goal, \"E/DtHYMjvj7D4way12JGJf46ERg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Goal;\nexport default Goal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Goal\");","map":{"version":3,"sources":["/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/Goal.js"],"names":["useState","useEffect","useNavigate","Goal","goal","categories","priorities","goalTitle","setGoalTitle","goalTarget","setGoalTarget","goalStartDate","setGoalStartDate","goalEndDate","setGoalEndDate","loading","setLoading","allTaskGivenPeriod","setAllTaskGivenPeriod","allCategoryTaskGivenPeriod","setAllCategoryTaskGivenPeriod","tasksOnTarget","setTasksOnTarget","goalTask","setGoalTask","navigate","calculatingTargetOutcome","findGoalEndDate","title","target","startDate","findDaysAfter","console","log","type","daysAfter","endDate","Date","split","reverse","toString","setMonth","getMonth","toLocaleDateString","setDate","getDate","onGoalClick","e","state","dateNow","parse","dateEnd"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,kBAA5B;;;;AAGA,MAAMC,IAAI,GAAG,QAAsC;AAAA;;AAAA,MAArC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,UAAR;AAAoBC,IAAAA;AAApB,GAAqC;AAC/C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,IAAD,CAA9C;AAEA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,IAAD,CAAtC;AAEA,QAAM,CAACiB,kBAAD,EAAqBC,qBAArB,IAA8ClB,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAM,CAACmB,0BAAD,EAA6BC,6BAA7B,IAA8DpB,QAAQ,CAAC,IAAD,CAA5E;AACA,QAAM,CAACqB,aAAD,EAAgBC,gBAAhB,IAAoCtB,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACuB,QAAD,EAAWC,WAAX,IAA0BxB,QAAQ,CAAC,IAAD,CAAxC;AAEA,QAAMyB,QAAQ,GAAGvB,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZyB,IAAAA,wBAAwB;AACxBC,IAAAA,eAAe,CAACvB,IAAD,CAAf;AAEH,GAJQ,EAIN,EAJM,CAAT,CAf+C,CAqB/C;AACA;AAEA;;AAGAH,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,UAAU,CAAC,KAAD,CAAV;AAEH,GAHQ,EAGN,CAACT,SAAD,EAAYE,UAAZ,EAAwBE,aAAxB,EAAuCE,WAAvC,CAHM,CAAT;AAKAZ,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,YAAY,CAACJ,IAAI,CAACwB,KAAN,CAAZ;AACAlB,IAAAA,aAAa,CAACN,IAAI,CAACyB,MAAN,CAAb;AACAjB,IAAAA,gBAAgB,CAACR,IAAI,CAAC0B,SAAN,CAAhB;AAEH,GALQ,EAKN,CAAC1B,IAAD,CALM,CAAT;AAOAH,EAAAA,SAAS,CAAC,MAAM;AACZyB,IAAAA,wBAAwB;AAE3B,GAHQ,EAGN,CAACb,WAAD,CAHM,CAAT;;AAKA,QAAMkB,aAAa,GAAI3B,IAAD,IAAU;AAC5B4B,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AACA,QAAG7B,IAAI,CAAC8B,IAAL,KAAY,OAAf,EAAuB;AACnBF,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EADmB,CACU;;AAC7BD,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAFmB,CAEa;;AAChC,aAAO,CAAP;AAEH;;AAAA,QAAG7B,IAAI,CAAC8B,IAAL,KAAY,QAAf,EAAwB;AACrBF,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EADqB,CACS;;AAC9BD,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAFqB,CAEW;;AAChC,aAAO,CAAP;AAEH;;AAAA,QAAG7B,IAAI,CAAC8B,IAAL,KAAY,SAAf,EAAyB;AACtB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAFsB,CAES;;AAC/BD,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAHsB,CAGgB;;AACtC,aAAO,SAAP;AAEH;AACJ,GAnBD;;AAqBA,QAAMN,eAAe,GAAIvB,IAAD,IAAU;AAC9B4B,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAD8B,CACY;;AAC1C,QAAIE,SAAS,GAAGJ,aAAa,CAAC3B,IAAD,CAA7B;AACA,QAAIO,aAAa,GAAGP,IAAI,CAAC0B,SAAzB;AACA,QAAIM,OAAO,GAAG,IAAIC,IAAJ,CAAS1B,aAAa,CAAC2B,KAAd,CAAoB,GAApB,EAAyBC,OAAzB,GAAmCC,QAAnC,EAAT,CAAd,CAJ8B,CAK9B;;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBG,OAAvB,EAN8B,CAME;;AAChC,QAAGzB,aAAa,IAAIwB,SAApB,EAA8B;AAC1B,UAAGA,SAAS,KAAG,SAAf,EAAyB;AACrB;AACA;AACA;AACAC,QAAAA,OAAO,CAACK,QAAR,CAAiBL,OAAO,CAACM,QAAR,KAAqB,CAAtC,EAJqB,CAKrB;AACA;;AACA5B,QAAAA,cAAc,CAACsB,OAAO,CAACO,kBAAR,EAAD,CAAd;AAEH,OATD,MASK;AACD;AACA;AACA;AACAP,QAAAA,OAAO,CAACQ,OAAR,CAAgBR,OAAO,CAACS,OAAR,KAAoBV,SAApC,EAJC,CAKD;AACA;;AACArB,QAAAA,cAAc,CAACsB,OAAO,CAACO,kBAAR,EAAD,CAAd;AAEH;AACJ;AACJ,GA5BD;;AA8BA,QAAMG,WAAW,GAAIC,CAAD,IAAO;AACvBf,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC7B,IAAvC,EADuB,CACsB;;AAC7CqB,IAAAA,QAAQ,CAAE,UAASrB,IAAI,CAACwB,KAAM,EAAtB,EAAyB;AAC7BoB,MAAAA,KAAK,EAAE;AACH5C,QAAAA,IAAI,EAACA,IADF;AAEHC,QAAAA,UAAU,EAACA,UAFR;AAGHC,QAAAA,UAAU,EAAEA,UAHT;AAIH8B,QAAAA,OAAO,EAAEvB;AAJN;AADsB,KAAzB,CAAR;AAQH,GAVD;;AAYA,QAAMa,wBAAwB,GAAG,MAAM;AACnC,QAAIuB,OAAO,GAAGZ,IAAI,CAACa,KAAL,CAAW,IAAIb,IAAJ,EAAX,CAAd,CADmC,CAEnC;;AACA,QAAIc,OAAO,GAAGd,IAAI,CAACa,KAAL,CAAW,IAAIb,IAAJ,CAASxB,WAAW,CAACyB,KAAZ,CAAkB,GAAlB,EAAuBC,OAAvB,EAAT,CAAX,CAAd;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBkB,OAAvB,EAJmC,CAIH;;AAChC,QAAGF,OAAO,IAAIE,OAAd,EAAsB;AAClBnB,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EADkB,CACK;;AACvB,aAAO,SAAP;AAEH,KAJD,MAIK;AACD,UAAGZ,aAAa,IAAIE,QAApB,EAA6B;AACzBS,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EADyB,CACA;;AACzB,eAAO,WAAP;AAEH,OAJD,MAIK;AACDD,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EADC,CACqB;;AACtB,eAAO,QAAP;AAEH;AACJ;AACJ,GApBD;;AAuBA,sBACI;AAAA,cACKlB,OAAO,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADQ,gBAGR;AAAQ,MAAA,OAAO,EAAG+B,WAAlB;AAAA,8BAAgC;AAAA,gCAC5B;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,4BAAKvC,SAAL;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD4B,eAK5B;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,4BAAKI,aAAL;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAL4B,eAS5B;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,4BAAKE,WAAL;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAT4B,eAa5B;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,4BAAKJ,UAAL;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAb4B;AAAA,sBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH,CA9JD;;GAAMN,I;UAaeD,W;;;KAbfC,I;AAgKN,eAAeA,IAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nconst Goal = ({ goal, categories, priorities }) => {\n    const [goalTitle, setGoalTitle] = useState(null);\n    const [goalTarget, setGoalTarget] = useState(null);\n    const [goalStartDate, setGoalStartDate] = useState(null);\n    const [goalEndDate, setGoalEndDate] = useState(null);\n    \n    const [loading, setLoading] = useState(true);\n\n    const [allTaskGivenPeriod, setAllTaskGivenPeriod] = useState(null);\n    const [allCategoryTaskGivenPeriod, setAllCategoryTaskGivenPeriod] = useState(null);\n    const [tasksOnTarget, setTasksOnTarget] = useState(null);\n    const [goalTask, setGoalTask] = useState(null);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        calculatingTargetOutcome();\n        findGoalEndDate(goal)\n\n    }, []);\n\n    // useEffect(() => {\n    //     calculatingTargetOutcome();\n\n    // }, [goalStartDate]);\n\n\n    useEffect(() => {\n        setLoading(false)\n        \n    }, [goalTitle, goalTarget, goalStartDate, goalEndDate]);\n\n    useEffect(() => {\n        setGoalTitle(goal.title);\n        setGoalTarget(goal.target);\n        setGoalStartDate(goal.startDate);\n        \n    }, [goal]);\n\n    useEffect(() => {\n        calculatingTargetOutcome();\n        \n    }, [goalEndDate]);\n\n    const findDaysAfter = (goal) => {\n        console.log(\"within find days after\");\n        if(goal.type===\"DAILY\"){\n            console.log(\"of daily type\");///////\n            console.log(\"1 to be returned\");///////\n            return 1;\n\n        }if(goal.type===\"WEEKLY\"){\n            console.log(\"of weekly type\");///////\n            console.log(\"7 to be returned\");///////\n            return 7;\n            \n        }if(goal.type===\"MONTHLY\"){\n            // return 30;\n            console.log(\"of monthly type\");///////\n            console.log(\"monthly to be returned\");///////\n            return \"MONTHLY\";\n            \n        } \n    }\n\n    const findGoalEndDate = (goal) => {\n        console.log(\"within find goals end date\");//////////\n        let daysAfter = findDaysAfter(goal);\n        let goalStartDate = goal.startDate;\n        let endDate = new Date(goalStartDate.split(\"/\").reverse().toString());\n        // const options = { year: \"numeric\", month: \"numeric\", day: \"numeric\" }; \n        console.log(\"endDate\", endDate);//////////\n        if(goalStartDate && daysAfter){\n            if(daysAfter===\"MONTHLY\"){\n                // console.log('goalStartDate.splilt(\"/\")', goalStartDate.split(\"/\").reverse().toString());\n                // console.log(\"start Date Month\", endDate);\n                // console.log(\"getMonth\", endDate.getMonth());\n                endDate.setMonth(endDate.getMonth() + 1);\n                // console.log(\"startDateMonth\", goalStartDate);//////////////\n                // console.log(\"endDateMonth\", endDate.toLocaleDateString('en-GB',options));//////////////\n                setGoalEndDate(endDate.toLocaleDateString());\n\n            }else{\n                // console.log(\"start Date\", endDate);\n                // console.log(\"daysAfter\", daysAfter);\n                // console.log(\"getDay\", endDate.getDate());\n                endDate.setDate(endDate.getDate() + daysAfter);\n                // console.log(\"startDate\", goalStartDate);//////////////\n                // console.log(\"endDate\", endDate.toLocaleDateString('en-GB', options));//////////////\n                setGoalEndDate(endDate.toLocaleDateString());\n\n            }\n        }\n    }\n\n    const onGoalClick = (e) => {\n        console.log(\"a goal has been clicked\", goal);/////////\n        navigate(`/goal/:${goal.title}`, {\n            state: {\n                goal:goal,\n                categories:categories,\n                priorities: priorities,\n                endDate: goalEndDate\n            }\n        })\n    }\n\n    const calculatingTargetOutcome = () => {\n        let dateNow = Date.parse(new Date());\n        // console.log(\"endDate\", goalEndDate);//////////\n        let dateEnd = Date.parse(new Date(goalEndDate.split(\"/\").reverse()));\n        console.log(\"dateEnd\", dateEnd);//////////////\n        if(dateNow <= dateEnd){\n            console.log(\"penidng\");////////////\n            return \"penidng\"\n\n        }else{\n            if(tasksOnTarget >= goalTask){\n                console.log(\"succeeded\");//////////\n                return \"succeeded\"\n\n            }else{\n                console.log(\"failed\");///////\n                return \"failed\"\n\n            }\n        }\n    }\n\n\n    return(\n        <div>\n            {loading?\n            <p>Loading...</p>\n            :\n            <button onClick={ onGoalClick }><>\n                <div>\n                    <label> Goal Title </label>\n                    <p> {goalTitle} </p>\n                </div>\n                <div>\n                    <label> Goal Start Date </label>\n                    <p> {goalStartDate} </p>\n                </div>\n                <div>\n                    <label> Goal End Date </label>\n                    <p> {goalEndDate} </p>\n                </div>\n                <div>\n                    <label> Goal Target </label>\n                    <p> {goalTarget} </p>\n                </div>\n            </>See Goal Details </button>\n            }\n            \n        </div>\n\n    )\n}\n\nexport default Goal;\n"]},"metadata":{},"sourceType":"module"}