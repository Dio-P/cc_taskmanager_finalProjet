{"ast":null,"code":"var _jsxFileName = \"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/WholeMainPageContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from 'react';\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport AllTasksContainer from './AllTasksContainer';\nimport TasksBoxMainMenuBar from '../components/TasksBoxMainMenuBar';\nimport Menu from '../components/Menu';\nimport RequestContext from '../context/RequestContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WholeMainPageContainer = _ref => {\n  _s();\n\n  let {\n    categories,\n    priorities,\n    user,\n    goals,\n    goalTypesList\n  } = _ref;\n  const [allTasks, setAllTasks] = useState([]);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [categoriesTitles, setCategoriesTitles] = useState([]);\n  const [completedTasks, setCompletedTasks] = useState([]);\n  const [uncompletedTasks, setUncompletedTasks] = useState([]);\n  const [categoriesToDisplay, setCategoriesToDisplay] = useState([]);\n  const [prioritiesToDisplay, setPrioritiesToDisplay] = useState([]);\n  const [uncompletedTasksToDisplay, setUncompletedTasksToDisplay] = useState([]);\n  const [completedTasksToDisplay, setCompletedTasksToDisplay] = useState([]);\n  const {\n    get\n  } = useContext(RequestContext);\n  const navigate = useNavigate();\n\n  const closeMenuFunction = () => {\n    setIsMenuOpen(false);\n  }; // useEffect(() => {\n  //     setUncompletedTasksToDisplay(uncompletedTasks);\n  //     setCompletedTasksToDisplay(completedTasks);\n  // }, []);\n\n\n  useEffect(() => {\n    const getTasks = async authId => {\n      get(\"tasks\").then(function (resJson) {\n        setAllTasks(resJson);\n      }).catch(e => console.log(e));\n    };\n\n    getTasks(); // postUser();\n    // getCategories();\n    // getGoals();\n    // getUsers();\n  }, [get]);\n  useEffect(() => {\n    // setting the comleted and unclompleted tasks \n    // in different states.\n    if (allTasks) {\n      let completedHelper = [];\n      let uncompletedHelper = [];\n\n      for (let task of allTasks) {\n        if (task.completed) {\n          completedHelper.push(task);\n        } else {\n          uncompletedHelper.push(task);\n        }\n      }\n\n      setCompletedTasks(completedHelper);\n      setUncompletedTasks(uncompletedHelper);\n    }\n  }, [allTasks]);\n  useEffect(() => {\n    setUncompletedTasksToDisplay(uncompletedTasks);\n    setCompletedTasksToDisplay(completedTasks);\n  }, [uncompletedTasks, completedTasks]);\n  useEffect(() => {\n    let categoriesTitles = categories.map(category => category.title);\n    setCategoriesTitles(categoriesTitles);\n  }, [categories]);\n  useEffect(() => {\n    let uncompletedTaskToDisplayHelper = [];\n    let completedTaskToDisplayHelper = [];\n\n    for (let task of uncompletedTasks) {\n      if (categoriesToDisplay.includes(task.category.title) && prioritiesToDisplay.includes(task.priority)) {\n        // console.log(\"This task is to be displayed\");//////////////////\n        uncompletedTaskToDisplayHelper.push(task); // console.log(\"uncompletedTaskToDisplayHelper\", uncompletedTaskToDisplayHelper);////////////\n      }\n    }\n\n    for (let task of completedTasks) {\n      if (categoriesToDisplay.includes(task.category.title) && prioritiesToDisplay.includes(task.priority)) {\n        // console.log(\"This completed task is to be displayed\");//////////////\n        completedTaskToDisplayHelper.push(task); // console.log(\"completedTaskToDisplayHelper\", completedTaskToDisplayHelper);/////////////\n      }\n    }\n\n    setUncompletedTasksToDisplay(uncompletedTaskToDisplayHelper);\n    setCompletedTasksToDisplay(completedTaskToDisplayHelper);\n  }, [categoriesToDisplay, prioritiesToDisplay]);\n\n  const setPrioritiesFromDropDown = choosenOption => {\n    let prioritiesToDisplayHelper = [];\n\n    if (choosenOption) {\n      let choosenPriorities = Object.values(choosenOption); // console.log(\"priorities Chosen Option\", choosenOption);////////\n\n      for (let priority of choosenPriorities) {\n        if (priority.toDisplay) {\n          prioritiesToDisplayHelper.push(priority.value);\n        }\n      } // console.log(\"AfterPrioritiesToDisplayHelper\", prioritiesToDisplayHelper);////////\n\n\n      setPrioritiesToDisplay(prioritiesToDisplayHelper);\n    }\n  };\n\n  const setCategoriesFromDropDown = choosenOption => {\n    let categoriesToDisplayHelper = [];\n\n    if (choosenOption) {\n      let choosenOptions = Object.values(choosenOption); // console.log(\"categories Chosen Option\", choosenOption);///////////////\n\n      for (let category of choosenOptions) {\n        if (category.toDisplay) {\n          categoriesToDisplayHelper.push(category.value);\n        }\n      } // console.log(\"AfterCategoriesToDisplayHelper\", categoriesToDisplayHelper);//////\n\n\n      setCategoriesToDisplay(categoriesToDisplayHelper);\n    }\n  }; // updateAppMainStateFromComponent={ updateAppTasksFromComponent }\n\n\n  const updateWholeMainPageTasksFromComponent = task => {\n    let allTasksUpdateHelper = allTasks.filter(taskInAll => taskInAll.id !== task.id);\n    console.log(\"allTasksUpdateHelper\", allTasksUpdateHelper);\n    console.log(\"task\", task);\n    setAllTasks([...allTasksUpdateHelper, task]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isMenuOpen ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsMenuOpen(!isMenuOpen),\n        children: \"Menu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(Menu, {\n      closeMenuFunction: () => closeMenuFunction(),\n      categories: categories,\n      priorities: priorities,\n      goals: goals,\n      goalTypesList: goalTypesList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate(\"/task/createNewTask\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TasksBoxMainMenuBar, {\n      categories: categories,\n      priorities: priorities,\n      categoriesTitles: categoriesTitles,\n      setPrioritiesFromDropDown: choosenOption => setPrioritiesFromDropDown(choosenOption),\n      setCategoriesFromDropDown: choosenOption => setCategoriesFromDropDown(choosenOption)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hello \", user.email, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AllTasksContainer, {\n      uncompletedTasksToDisplay: uncompletedTasksToDisplay,\n      completedTasksToDisplay: completedTasksToDisplay,\n      categories: categories,\n      priorities: priorities,\n      updateWholeMainPageStateFromComponent: updateWholeMainPageTasksFromComponent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WholeMainPageContainer, \"NFHP4m4Of9vBdRql+UCfktR1Lq0=\", false, function () {\n  return [useNavigate];\n});\n\n_c = WholeMainPageContainer;\nexport default WholeMainPageContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"WholeMainPageContainer\");","map":{"version":3,"sources":["/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/WholeMainPageContainer.js"],"names":["useState","useEffect","useContext","useNavigate","useLocation","AllTasksContainer","TasksBoxMainMenuBar","Menu","RequestContext","WholeMainPageContainer","categories","priorities","user","goals","goalTypesList","allTasks","setAllTasks","isMenuOpen","setIsMenuOpen","categoriesTitles","setCategoriesTitles","completedTasks","setCompletedTasks","uncompletedTasks","setUncompletedTasks","categoriesToDisplay","setCategoriesToDisplay","prioritiesToDisplay","setPrioritiesToDisplay","uncompletedTasksToDisplay","setUncompletedTasksToDisplay","completedTasksToDisplay","setCompletedTasksToDisplay","get","navigate","closeMenuFunction","getTasks","authId","then","resJson","catch","e","console","log","completedHelper","uncompletedHelper","task","completed","push","map","category","title","uncompletedTaskToDisplayHelper","completedTaskToDisplayHelper","includes","priority","setPrioritiesFromDropDown","choosenOption","prioritiesToDisplayHelper","choosenPriorities","Object","values","toDisplay","value","setCategoriesFromDropDown","categoriesToDisplayHelper","choosenOptions","updateWholeMainPageTasksFromComponent","allTasksUpdateHelper","filter","taskInAll","id","email"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from 'react';\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nimport AllTasksContainer from './AllTasksContainer';\nimport TasksBoxMainMenuBar from '../components/TasksBoxMainMenuBar';\nimport Menu from '../components/Menu';\nimport RequestContext from '../context/RequestContext';\n\nconst WholeMainPageContainer= ({ categories, priorities, user, goals, goalTypesList}) => {\n    const [allTasks, setAllTasks] = useState([]);\n\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n    const [categoriesTitles, setCategoriesTitles] = useState([]);\n    const [completedTasks, setCompletedTasks] = useState([]);\n    const [uncompletedTasks, setUncompletedTasks] = useState([]);\n\n    const [categoriesToDisplay, setCategoriesToDisplay] = useState([]);\n    const [prioritiesToDisplay, setPrioritiesToDisplay] = useState([]);\n    const [uncompletedTasksToDisplay, setUncompletedTasksToDisplay] = useState([]);\n    const [completedTasksToDisplay, setCompletedTasksToDisplay] = useState([]);\n\n    const { get } = useContext(RequestContext);\n    const navigate = useNavigate();\n\n    const closeMenuFunction = () => {\n        setIsMenuOpen(false);\n    }\n\n    // useEffect(() => {\n    //     setUncompletedTasksToDisplay(uncompletedTasks);\n    //     setCompletedTasksToDisplay(completedTasks);\n        \n    // }, []);\n\n    useEffect(() => {\n        const getTasks =  async (authId) => {\n            get(\"tasks\")\n            .then(function (resJson) {\n                setAllTasks(resJson);\n            })\n            .catch((e) => console.log(e));\n            }\n            getTasks();\n            // postUser();\n            // getCategories();\n            // getGoals();\n            // getUsers();\n    }, [get]);\n\n    useEffect(() => {\n        // setting the comleted and unclompleted tasks \n        // in different states.\n        if(allTasks){\n        let completedHelper = [];\n        let uncompletedHelper = [];\n        \n          for(let task of allTasks){\n            if(task.completed){\n              completedHelper.push(task);\n  \n            }else{\n              uncompletedHelper.push(task);\n  \n            }\n          }\n          setCompletedTasks(completedHelper);\n          setUncompletedTasks(uncompletedHelper);\n        }\n        \n      }, [allTasks]);\n\n    useEffect(() => {\n        setUncompletedTasksToDisplay(uncompletedTasks);\n        setCompletedTasksToDisplay(completedTasks);\n        \n    }, [uncompletedTasks, completedTasks]);\n\n\n\n    useEffect(() => {\n        let categoriesTitles = categories.map(category => (\n            category.title\n            ))\n        setCategoriesTitles(categoriesTitles)\n        \n        \n    }, [categories]);\n\n    useEffect(() => {\n        let uncompletedTaskToDisplayHelper = [];\n        let completedTaskToDisplayHelper = [];\n\n        for(let task of uncompletedTasks){\n            if(\n                categoriesToDisplay.includes(task.category.title)\n                &&\n                prioritiesToDisplay.includes(task.priority)\n                ){\n                // console.log(\"This task is to be displayed\");//////////////////\n                uncompletedTaskToDisplayHelper.push(task);\n                // console.log(\"uncompletedTaskToDisplayHelper\", uncompletedTaskToDisplayHelper);////////////\n            }\n        }\n\n        for(let task of completedTasks){\n            if(\n                categoriesToDisplay.includes(task.category.title)\n                &&\n                prioritiesToDisplay.includes(task.priority)\n                ){\n                // console.log(\"This completed task is to be displayed\");//////////////\n                completedTaskToDisplayHelper.push(task);\n                // console.log(\"completedTaskToDisplayHelper\", completedTaskToDisplayHelper);/////////////\n            }\n        }\n        setUncompletedTasksToDisplay(uncompletedTaskToDisplayHelper);\n        setCompletedTasksToDisplay(completedTaskToDisplayHelper);\n        \n    }, [categoriesToDisplay, prioritiesToDisplay]);\n\n\n    const setPrioritiesFromDropDown = (choosenOption) => {\n        let prioritiesToDisplayHelper = [];\n        if(choosenOption){\n            let choosenPriorities = Object.values(choosenOption);\n            // console.log(\"priorities Chosen Option\", choosenOption);////////\n            for(let priority of choosenPriorities){\n                if(priority.toDisplay){\n                    prioritiesToDisplayHelper.push(priority.value);\n                }\n            }\n            // console.log(\"AfterPrioritiesToDisplayHelper\", prioritiesToDisplayHelper);////////\n            setPrioritiesToDisplay(prioritiesToDisplayHelper);\n        }\n    }\n\n    const setCategoriesFromDropDown = (choosenOption) => {\n        let categoriesToDisplayHelper = [];\n        if(choosenOption){\n            let choosenOptions = Object.values(choosenOption)\n            // console.log(\"categories Chosen Option\", choosenOption);///////////////\n            for(let category of choosenOptions){\n                if(category.toDisplay){\n                    categoriesToDisplayHelper.push(category.value);\n                }\n            }\n            // console.log(\"AfterCategoriesToDisplayHelper\", categoriesToDisplayHelper);//////\n            setCategoriesToDisplay(categoriesToDisplayHelper);\n        }\n    }\n\n    // updateAppMainStateFromComponent={ updateAppTasksFromComponent }\n    const updateWholeMainPageTasksFromComponent =(task) => {\n        let allTasksUpdateHelper = allTasks.filter(taskInAll => taskInAll.id!==task.id);\n        console.log(\"allTasksUpdateHelper\", allTasksUpdateHelper);\n        console.log(\"task\", task);\n        setAllTasks([...allTasksUpdateHelper, task]);\n\n    }\n\n    return (\n        <div>\n            {!isMenuOpen?\n                <>\n                    <button onClick={()=>setIsMenuOpen(!isMenuOpen)}>Menu</button>\n                </>\n            :\n                <Menu\n                    closeMenuFunction={ ()=>closeMenuFunction() }\n                    categories={ categories }\n                    priorities={ priorities }\n                    goals={ goals }\n                    goalTypesList ={ goalTypesList }\n                />\n            }\n            <div>\n                <button onClick={()=> navigate(\"/task/createNewTask\")}></button>\n            </div>\n            <TasksBoxMainMenuBar \n                categories={ categories }\n                priorities={ priorities }\n                categoriesTitles={ categoriesTitles }\n                setPrioritiesFromDropDown={(choosenOption)=> setPrioritiesFromDropDown(choosenOption) }\n                setCategoriesFromDropDown={(choosenOption)=> setCategoriesFromDropDown(choosenOption) }\n            />\n            <p>Hello {user.email} </p>\n            <AllTasksContainer \n                uncompletedTasksToDisplay={ uncompletedTasksToDisplay } \n                completedTasksToDisplay={ completedTasksToDisplay }\n                categories={ categories }\n                priorities={ priorities }\n                updateWholeMainPageStateFromComponent={ updateWholeMainPageTasksFromComponent }\n            />\n\n        </div>\n    )\n}\n\nexport default WholeMainPageContainer;"]},"metadata":{},"sourceType":"module"}