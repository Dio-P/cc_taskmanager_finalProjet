{"ast":null,"code":"var _jsxFileName = \"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/MultipleOptionsDropdown.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MultipleOptionsDropdown = _ref => {\n  _s();\n\n  let {\n    options,\n    setOptionsFromDropDown\n  } = _ref;\n  const [optionshandler, setOptionshandler] = useState(null);\n  useEffect(() => {\n    const optionshandlerHelper = {};\n\n    if (options) {\n      for (let option of options) {\n        optionshandlerHelper[option] = {\n          value: option,\n          toDisplay: true,\n          checked: true\n        };\n      }\n\n      console.log(\"optionshandler\", optionshandler); ////////\n\n      setOptionshandler({ ...optionshandler,\n        ...optionshandlerHelper\n      });\n    }\n  }, []);\n  useEffect(() => {\n    console.log(\"optionshandler\", optionshandler); //////////\n\n    setOptionsFromDropDown(optionshandler);\n  }, [optionshandler]);\n\n  const onClick = e => {\n    let option = e.target.value;\n    setOptionshandler({ ...optionshandler,\n      [option]: {\n        value: option,\n        toDisplay: !optionshandler[option].toDisplay,\n        checked: !optionshandler[option].checked\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: optionshandler ? options.map(option => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onClick: e => onClick(e),\n        checked: optionshandler[option].checked,\n        value: option\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }, this), option]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }, this)) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MultipleOptionsDropdown, \"HimBv2VIJ5OTN+b4GlTAT3aMfXs=\");\n\n_c = MultipleOptionsDropdown;\nexport default MultipleOptionsDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultipleOptionsDropdown\");","map":{"version":3,"sources":["/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/MultipleOptionsDropdown.js"],"names":["useState","useEffect","MultipleOptionsDropdown","options","setOptionsFromDropDown","optionshandler","setOptionshandler","optionshandlerHelper","option","value","toDisplay","checked","console","log","onClick","e","target","map"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,MAAMC,uBAAuB,GAAG,QAAyC;AAAA;;AAAA,MAAxC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAwC;AACrE,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,IAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMM,oBAAoB,GAAG,EAA7B;;AACA,QAAGJ,OAAH,EAAW;AACP,WAAI,IAAIK,MAAR,IAAkBL,OAAlB,EAA0B;AACtBI,QAAAA,oBAAoB,CAACC,MAAD,CAApB,GAA8B;AACdC,UAAAA,KAAK,EAAED,MADO;AAEdE,UAAAA,SAAS,EAAE,IAFG;AAGdC,UAAAA,OAAO,EAAE;AAHK,SAA9B;AAKH;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BR,cAA9B,EARO,CAQuC;;AAC9CC,MAAAA,iBAAiB,CAAC,EAAC,GAAGD,cAAJ;AAAoB,WAAGE;AAAvB,OAAD,CAAjB;AACH;AACJ,GAbQ,EAaN,EAbM,CAAT;AAeAN,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BR,cAA9B,EADY,CACkC;;AAC9CD,IAAAA,sBAAsB,CAACC,cAAD,CAAtB;AACH,GAHQ,EAGN,CAACA,cAAD,CAHM,CAAT;;AAKA,QAAMS,OAAO,GAAIC,CAAD,IAAO;AACnB,QAAIP,MAAM,GAAGO,CAAC,CAACC,MAAF,CAASP,KAAtB;AACAH,IAAAA,iBAAiB,CAAC,EACd,GAAGD,cADW;AAEd,OAACG,MAAD,GAAU;AACNC,QAAAA,KAAK,EAAED,MADD;AAENE,QAAAA,SAAS,EAAE,CAACL,cAAc,CAACG,MAAD,CAAd,CAAuBE,SAF7B;AAGNC,QAAAA,OAAO,EAAE,CAACN,cAAc,CAACG,MAAD,CAAd,CAAuBG;AAH3B;AAFI,KAAD,CAAjB;AASH,GAXD;;AAcA,sBACI;AAAA,cACKN,cAAc,GACXF,OAAO,CAACc,GAAR,CAAYT,MAAM,iBACd;AAAA,8BAAI;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,OAAO,EAAGO,CAAD,IAAMD,OAAO,CAACC,CAAD,CAA7C;AAAkD,QAAA,OAAO,EAAEV,cAAc,CAACG,MAAD,CAAd,CAAuBG,OAAlF;AAA2F,QAAA,KAAK,EAAEH;AAAlG;AAAA;AAAA;AAAA;AAAA,cAAJ,EAAiHA,MAAjH;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADW,GAMX;AAPR;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAnDD;;GAAMN,uB;;KAAAA,uB;AAqDN,eAAeA,uBAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst MultipleOptionsDropdown = ({ options, setOptionsFromDropDown }) => {\n    const [optionshandler, setOptionshandler] = useState(null);\n\n    useEffect(() => {\n        const optionshandlerHelper = {};\n        if(options){\n            for(let option of options){\n                optionshandlerHelper[option]= {\n                                value: option,\n                                toDisplay: true,\n                                checked: true\n                            }\n            }\n            console.log(\"optionshandler\", optionshandler);////////\n            setOptionshandler({...optionshandler, ...optionshandlerHelper});\n        }   \n    }, []);\n\n    useEffect(() => {\n        console.log(\"optionshandler\", optionshandler);//////////\n        setOptionsFromDropDown(optionshandler)\n    }, [optionshandler]);\n\n    const onClick = (e) => {\n        let option = e.target.value;\n        setOptionshandler({\n            ...optionshandler,\n            [option]: {\n                value: option,\n                toDisplay: !optionshandler[option].toDisplay,\n                checked: !optionshandler[option].checked\n            }\n            \n        })\n    }\n\n    \n    return(\n        <ul>\n            {optionshandler?\n                options.map(option => (\n                    <li><input type=\"checkbox\" onClick={(e)=> onClick(e)} checked={optionshandler[option].checked} value={option} />{option}</li>\n                    \n                ))\n            :\n                null\n            }\n            \n\n        </ul>\n    )\n}\n\nexport default MultipleOptionsDropdown;"]},"metadata":{},"sourceType":"module"}