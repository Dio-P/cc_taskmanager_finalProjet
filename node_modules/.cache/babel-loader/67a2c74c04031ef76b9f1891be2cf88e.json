{"ast":null,"code":"var _jsxFileName = \"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/WholeMainPageContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport AllTasksContainer from './AllTasksContainer';\nimport TasksBoxMainMenuBar from '../components/TasksBoxMainMenuBar';\nimport Menu from '../components/Menu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WholeMainPageContainer = _ref => {\n  _s();\n\n  let {\n    uncompletedTasks,\n    completedTasks,\n    categories,\n    priorities,\n    user\n  } = _ref;\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [categoriesToDisplay, setCategoriesToDisplay] = useState([]);\n  const [prioritiesToDisplay, setPrioritiesToDisplay] = useState([]);\n  const [uncompletedTasksToDisplay, setUncompletedTasksToDisplay] = useState([]);\n  const [completedTasksToDisplay, setCompletedTasksToDisplay] = useState([]);\n  const [prioritiesToDisplayHelper, setPrioritiesToDisplayHelper] = useState([]);\n  const [categoriesToDisplayHelper, setCategoriesToDisplayHelper] = useState([]);\n\n  const closeMenuFunction = () => {\n    setIsMenuOpen(false);\n  };\n\n  useEffect(() => {\n    console.log(\"categoriesToDisplay\", categoriesToDisplay);\n  }, [categoriesToDisplay]);\n  useEffect(() => {\n    console.log(\"prioritiesToDisplay\", prioritiesToDisplay);\n  }, [prioritiesToDisplay]); // useEffect(() => {\n  //     console.log(\"categoriesToDisplayHelper\", categoriesToDisplayHelper);\n  //     setCategoriesToDisplay(categoriesToDisplayHelper.map(\n  //         categoryToDisplayObject => categoryToDisplayObject.option\n  //         ))\n  // }, [categoriesToDisplayHelper]);\n  // useEffect(() => {\n  //     console.log(\"prioritiesToDisplayHelper\", prioritiesToDisplayHelper);\n  //     setPrioritiesToDisplay(prioritiesToDisplayHelper.map(\n  //         priorityToDisplayObject => priorityToDisplayObject.option\n  //     ))\n  // }, [prioritiesToDisplayHelper]);\n\n  const setPrioritiesFromDropDown = choosenOption => {\n    let prioritiesToDisplayHelper = [];\n    console.log(\"priorities Chosen Option\", choosenOption);\n\n    for (let priority of choosenOption) {\n      if (priority.toDisplay) {\n        prioritiesToDisplayHelper.push(priority);\n      }\n    }\n  };\n\n  const setCategoriesFromDropDown = choosenOption => {\n    console.log(\"categories Chosen Option\", choosenOption);\n    let categoriesToDisplayHelper = [];\n\n    for (let category of choosenOption) {\n      if (category.toDisplay) {\n        categoriesToDisplayHelper.push(category);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isMenuOpen ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsMenuOpen(!isMenuOpen),\n        children: \"Menu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(Menu, {\n      closeMenuFunction: () => closeMenuFunction(),\n      categories: categories,\n      priorities: priorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TasksBoxMainMenuBar, {\n      categories: categories,\n      priorities: priorities,\n      setPrioritiesFromDropDown: choosenOption => setPrioritiesFromDropDown(choosenOption),\n      setCategoriesFromDropDown: choosenOption => setCategoriesFromDropDown(choosenOption)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hello \", user.email, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AllTasksContainer, {\n      uncompletedTasksToDisplay: uncompletedTasks,\n      completedTasksToDisplay: completedTasks,\n      categories: categories,\n      priorities: priorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WholeMainPageContainer, \"L3W2c3+XI2omZ8m8Y6s63iC+8aA=\");\n\n_c = WholeMainPageContainer;\nexport default WholeMainPageContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"WholeMainPageContainer\");","map":{"version":3,"sources":["/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/WholeMainPageContainer.js"],"names":["useState","useEffect","AllTasksContainer","TasksBoxMainMenuBar","Menu","WholeMainPageContainer","uncompletedTasks","completedTasks","categories","priorities","user","isMenuOpen","setIsMenuOpen","categoriesToDisplay","setCategoriesToDisplay","prioritiesToDisplay","setPrioritiesToDisplay","uncompletedTasksToDisplay","setUncompletedTasksToDisplay","completedTasksToDisplay","setCompletedTasksToDisplay","prioritiesToDisplayHelper","setPrioritiesToDisplayHelper","categoriesToDisplayHelper","setCategoriesToDisplayHelper","closeMenuFunction","console","log","setPrioritiesFromDropDown","choosenOption","priority","toDisplay","push","setCategoriesFromDropDown","category","email"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport AllTasksContainer from './AllTasksContainer';\nimport TasksBoxMainMenuBar from '../components/TasksBoxMainMenuBar';\nimport Menu from '../components/Menu';\n\nconst WholeMainPageContainer= ({ uncompletedTasks, completedTasks, categories, priorities, user }) => {\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n    const [categoriesToDisplay, setCategoriesToDisplay] = useState([]);\n    const [prioritiesToDisplay, setPrioritiesToDisplay] = useState([]);\n    const [uncompletedTasksToDisplay, setUncompletedTasksToDisplay] = useState([]);\n    const [completedTasksToDisplay, setCompletedTasksToDisplay] = useState([]);\n\n    const [prioritiesToDisplayHelper, setPrioritiesToDisplayHelper] = useState([]);\n    const [categoriesToDisplayHelper, setCategoriesToDisplayHelper] = useState([]);\n\n    const closeMenuFunction = () => {\n        setIsMenuOpen(false);\n    }\n\n    useEffect(() => {\n        console.log(\"categoriesToDisplay\", categoriesToDisplay);\n        \n    }, [categoriesToDisplay]);\n\n    useEffect(() => {\n        console.log(\"prioritiesToDisplay\", prioritiesToDisplay);\n        \n    }, [prioritiesToDisplay]);\n\n    // useEffect(() => {\n    //     console.log(\"categoriesToDisplayHelper\", categoriesToDisplayHelper);\n    //     setCategoriesToDisplay(categoriesToDisplayHelper.map(\n    //         categoryToDisplayObject => categoryToDisplayObject.option\n    //         ))\n        \n    // }, [categoriesToDisplayHelper]);\n\n    // useEffect(() => {\n    //     console.log(\"prioritiesToDisplayHelper\", prioritiesToDisplayHelper);\n    //     setPrioritiesToDisplay(prioritiesToDisplayHelper.map(\n    //         priorityToDisplayObject => priorityToDisplayObject.option\n    //     ))\n        \n    // }, [prioritiesToDisplayHelper]);\n\n    const setPrioritiesFromDropDown = (choosenOption) => {\n        let prioritiesToDisplayHelper = [];\n        console.log(\"priorities Chosen Option\", choosenOption);\n        for(let priority of choosenOption){\n            if(priority.toDisplay){\n                prioritiesToDisplayHelper.push(priority);\n            }\n\n        }\n        \n        \n    }\n\n    const setCategoriesFromDropDown = (choosenOption) => {\n        console.log(\"categories Chosen Option\", choosenOption);\n        let categoriesToDisplayHelper = [];\n        for(let category of choosenOption){\n            if(category.toDisplay){\n                categoriesToDisplayHelper.push(category);\n            }\n\n        }\n\n        \n    }\n\n    return (\n        <div>\n            {!isMenuOpen?\n                <>\n                    <button onClick={()=>setIsMenuOpen(!isMenuOpen)}>Menu</button>\n                </>\n            :\n                <Menu\n                    closeMenuFunction={ ()=>closeMenuFunction() }\n                    categories={ categories }\n                    priorities={ priorities }\n                />\n            }\n            <TasksBoxMainMenuBar \n                categories={ categories }\n                priorities={ priorities }\n                setPrioritiesFromDropDown={(choosenOption)=> setPrioritiesFromDropDown(choosenOption) }\n                setCategoriesFromDropDown={(choosenOption)=> setCategoriesFromDropDown(choosenOption) }\n            />\n            <p>Hello {user.email} </p>\n            <AllTasksContainer \n                uncompletedTasksToDisplay={ uncompletedTasks } \n                completedTasksToDisplay={ completedTasks }\n                categories={ categories }\n                priorities={ priorities }\n            />\n\n        </div>\n    )\n}\n\nexport default WholeMainPageContainer;"]},"metadata":{},"sourceType":"module"}