{"ast":null,"code":"var _jsxFileName = \"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/Goal.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Goal = _ref => {\n  _s();\n\n  let {\n    goal,\n    categories,\n    priorities,\n    completedTasks\n  } = _ref;\n  const [goalTitle, setGoalTitle] = useState(null);\n  const [goalTarget, setGoalTarget] = useState(null);\n  const [goalStartDate, setGoalStartDate] = useState(null);\n  const [goalEndDate, setGoalEndDate] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [allCompletedTasksGivenPeriod, setAllCompletedTasksGivenPeriod] = useState([]);\n  const [tasksOnTarget, setTasksOnTarget] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    calculatingTargetOutcome();\n  }, []);\n  useEffect(() => {\n    calculateAllCompletedTasksGivenPeriod();\n    calculateAllCompletedTaskOfCategoryGivenPeriod();\n  }, [completedTasks]);\n  useEffect(() => {\n    setLoading(false);\n  }, [goalTitle, goalTarget, goalStartDate, goalEndDate]);\n  useEffect(() => {\n    setGoalTitle(goal.title);\n    setGoalTarget(goal.target);\n    setGoalStartDate(goal.startDate);\n    findGoalEndDate(goal);\n  }, [goal]);\n  useEffect(() => {\n    calculatingTargetOutcome();\n  }, [goalEndDate]);\n\n  const calculateAllCompletedTasksGivenPeriod = () => {\n    if (goalStartDate && goalEndDate) {\n      let periodStart = Date.parse(new Date(goalStartDate.split(\"-\")));\n      let periodEnd = Date.parse(new Date(goalEndDate.split(\"-\")));\n      let periodTaskHelper = [];\n\n      for (let task of completedTasks) {\n        if (completedTasks.completedTimeStamp >= periodStart && completedTasks.completedTimeStamp <= periodEnd) {\n          periodTaskHelper.push(task);\n        }\n      }\n\n      setAllCompletedTasksGivenPeriod(periodTaskHelper);\n    }\n  };\n\n  const calculateAllCompletedTaskOfCategoryGivenPeriod = () => {\n    // console.log(\"inside calculate all completed task@@@@@@@@@@@@@@@@@@@@\");\n    // console.log(\"goalStartDate@@@@@@@@@@@@@@@@@@@@\", goalStartDate);\n    // console.log(\"goalEndDate@@@@@@@@@@@@@@@@@@@@\", goalEndDate);\n    if (goalStartDate && goalEndDate) {\n      let periodStart = Date.parse(new Date(goalStartDate.split(\"-\")));\n      let periodEnd = Date.parse(new Date(goalEndDate.split(\"-\")));\n      let periodTaskHelper = [];\n      let idsArray = goal.categories.map(category => category.id); // console.log(\"periodStart@@@@@@@@@@\", periodStart);\n      // console.log(\"periodEnd@@@@@@@@@@\", periodEnd);\n\n      for (let task of completedTasks) {\n        // console.log(\"task@@@@@@@@@@@@\", task);\n        // console.log(\"goal.categories$$$$$$$$$$$OUT\", goal.categories);\n        // console.log(\"Objectgoal.categories$$$$$$$$$$$OUT\", Object.values(goal.categories));\n        // console.log(\"task.category$$$$$$$$$$$$$OUT\", task.category);\n        // console.log(\"idsArray.includes(task.category.id)\", idsArray.includes(task.category.id));\n        if (idsArray.includes(task.category.id)) {\n          // console.log(\"goal.categories$$$$$$$$$$$IN\", goal.categories);\n          // console.log(\"task.category$$$$$$$$$$$$$IN\", task.category);\n          // console.log(\"idsArray\", idsArray);\n          // console.log(\"task.category.id\", task.category.id);\n          console.log(\"completedTasks.completedTimeStamp@@@@@@@@@@@@\", completedTasks.completedTimeStamp);\n          console.log(\"periodStart\", periodStart);\n          console.log(\"periodEnd\", periodEnd);\n          console.log(\"completedTasks\", completedTasks);\n          console.log(\"completedTasks\", task.completedTimeStamp);\n          console.log(\"completedTasks\", task.completedTimeStamp <= periodEnd);\n\n          if (task.completedTimeStamp >= periodStart && task.completedTimeStamp <= periodEnd) {\n            console.log(\"completedTasks.completedTimeStamp@@@@@@@@@@@@\", completedTasks.completedTimeStamp);\n            console.log(\"the task is about to be pushed\");\n            periodTaskHelper.push(task);\n          }\n        }\n      }\n\n      setTasksOnTarget(periodTaskHelper);\n    }\n  };\n\n  const translatingTheGoalTargetIntoTasksNumber = () => {\n    const nuAllTasksPeriod = allCompletedTasksGivenPeriod.length || 1;\n    const numberOfTaksNeededToMeetTarget = goal.target / nuAllTasksPeriod * 100;\n    return numberOfTaksNeededToMeetTarget;\n  };\n\n  const findDaysAfter = goal => {\n    console.log(\"within find days after\");\n\n    if (goal.type === \"DAILY\") {\n      // console.log(\"of daily type\");///////\n      // console.log(\"1 to be returned\");///////\n      return 1;\n    }\n\n    if (goal.type === \"WEEKLY\") {\n      // console.log(\"of weekly type\");///////\n      // console.log(\"7 to be returned\");///////\n      return 7;\n    }\n\n    if (goal.type === \"MONTHLY\") {\n      // return 30;\n      console.log(\"of monthly type\"); ///////\n\n      console.log(\"monthly to be returned\"); ///////\n\n      return \"MONTHLY\";\n    }\n  }; // change the set to return and have the set with the function as argument to when edit is pressed.\n  // move that logic to the distinct page where this might actually change\n  // should I copy this or move it all in an outside function where it could happily leave for ever?!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  // because the problem is that it needs to be calculated in two places here to be desplayed and in the distinc to be changed.\n\n\n  const findGoalEndDate = goal => {\n    // console.log(\"within find goals end date\");//////////\n    let daysAfter = findDaysAfter(goal);\n    let goalStartDate = goal.startDate;\n    console.log(\"goalStartDate\", goalStartDate); /////////\n\n    let endDate = new Date(goalStartDate.split(\"-\").toString());\n    console.log(\"endDate\", endDate); //////////\n\n    if (goalStartDate && daysAfter) {\n      if (daysAfter === \"MONTHLY\") {\n        endDate.setMonth(endDate.getMonth() + 1);\n        setGoalEndDate(endDate.toLocaleDateString().split(\"/\").reverse().join(\"-\"));\n      } else {\n        endDate.setDate(endDate.getDate() + daysAfter);\n        setGoalEndDate(endDate.toLocaleDateString().split(\"/\").reverse().join(\"-\"));\n      }\n    }\n  };\n\n  const calculatingTargetOutcome = () => {\n    if (goalEndDate) {\n      let dateNow = Date.parse(new Date());\n      console.log(\"endDate\", goalEndDate); //////////\n\n      let dateEnd = Date.parse(new Date(goalEndDate.split(\"-\")));\n      console.log(\"dateEnd\", dateEnd); //////////////\n\n      if (dateNow <= dateEnd) {\n        console.log(\"penidng\"); ////////////\n\n        return \"pending\";\n      } else {\n        console.log(\"tasksOnTarget\", tasksOnTarget);\n        console.log(\"translatingTheGoalTargetIntoTasksNumber()\", translatingTheGoalTargetIntoTasksNumber());\n\n        if (tasksOnTarget.length >= translatingTheGoalTargetIntoTasksNumber()) {\n          console.log(\"succeeded\"); //////////\n\n          return \"succeeded\";\n        } else {\n          console.log(\"failed\"); ///////\n\n          return \"failed\";\n        }\n      }\n    }\n  };\n\n  const onGoalClick = e => {\n    console.log(\"a goal has been clicked\", goal); /////////\n\n    navigate(`/goal/:${goal.title}`, {\n      state: {\n        goal: goal,\n        categories: categories,\n        priorities: priorities,\n        endDate: goalEndDate\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: calculatingTargetOutcome(),\n      onClick: onGoalClick,\n      children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Goal Title \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", goalTitle, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Goal Start Date \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", goalStartDate, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Goal End Date \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", goalEndDate, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Goal Target \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", goalTarget, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true), \"See Goal Details \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Goal, \"7KQw4ntFRJCpujcFFDqtVI5/dis=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Goal;\nexport default Goal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Goal\");","map":{"version":3,"sources":["/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/Goal.js"],"names":["useState","useEffect","useNavigate","Goal","goal","categories","priorities","completedTasks","goalTitle","setGoalTitle","goalTarget","setGoalTarget","goalStartDate","setGoalStartDate","goalEndDate","setGoalEndDate","loading","setLoading","allCompletedTasksGivenPeriod","setAllCompletedTasksGivenPeriod","tasksOnTarget","setTasksOnTarget","navigate","calculatingTargetOutcome","calculateAllCompletedTasksGivenPeriod","calculateAllCompletedTaskOfCategoryGivenPeriod","title","target","startDate","findGoalEndDate","periodStart","Date","parse","split","periodEnd","periodTaskHelper","task","completedTimeStamp","push","idsArray","map","category","id","includes","console","log","translatingTheGoalTargetIntoTasksNumber","nuAllTasksPeriod","length","numberOfTaksNeededToMeetTarget","findDaysAfter","type","daysAfter","endDate","toString","setMonth","getMonth","toLocaleDateString","reverse","join","setDate","getDate","dateNow","dateEnd","onGoalClick","e","state"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nconst Goal = ({ goal, categories, priorities, completedTasks }) => {\n    const [goalTitle, setGoalTitle] = useState(null);\n    const [goalTarget, setGoalTarget] = useState(null);\n    const [goalStartDate, setGoalStartDate] = useState(null);\n    const [goalEndDate, setGoalEndDate] = useState(null);\n    \n    const [loading, setLoading] = useState(true);\n\n    const [allCompletedTasksGivenPeriod, setAllCompletedTasksGivenPeriod] = useState([]);\n    const [tasksOnTarget, setTasksOnTarget] = useState([]);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        calculatingTargetOutcome();\n        \n    }, []);\n\n\n    useEffect(() => {\n        calculateAllCompletedTasksGivenPeriod();\n        calculateAllCompletedTaskOfCategoryGivenPeriod();\n        \n\n    }, [completedTasks]);\n\n\n    useEffect(() => {\n        setLoading(false)\n        \n    }, [goalTitle, goalTarget, goalStartDate, goalEndDate]);\n\n\n    useEffect(() => {\n        setGoalTitle(goal.title);\n        setGoalTarget(goal.target);\n        setGoalStartDate(goal.startDate);\n        findGoalEndDate(goal)\n        \n    }, [goal]);\n\n\n    useEffect(() => {\n        calculatingTargetOutcome();\n        \n    }, [goalEndDate]);\n\n    const calculateAllCompletedTasksGivenPeriod = () => {\n        if(goalStartDate&&goalEndDate){\n            let periodStart= Date.parse(new Date(goalStartDate.split(\"-\")));\n            let periodEnd= Date.parse(new Date(goalEndDate.split(\"-\")));\n            let periodTaskHelper = []\n            for(let task of completedTasks){\n                if(\n                completedTasks.completedTimeStamp>=periodStart\n                &&\n                completedTasks.completedTimeStamp<=periodEnd\n                ){\n                    periodTaskHelper.push(task);\n                }\n            }\n            setAllCompletedTasksGivenPeriod(periodTaskHelper);\n        }\n    }\n\n    const calculateAllCompletedTaskOfCategoryGivenPeriod= () => {\n        // console.log(\"inside calculate all completed task@@@@@@@@@@@@@@@@@@@@\");\n        // console.log(\"goalStartDate@@@@@@@@@@@@@@@@@@@@\", goalStartDate);\n        // console.log(\"goalEndDate@@@@@@@@@@@@@@@@@@@@\", goalEndDate);\n        \n        if(goalStartDate&&goalEndDate){\n            let periodStart= Date.parse(new Date(goalStartDate.split(\"-\")));\n            let periodEnd= Date.parse(new Date(goalEndDate.split(\"-\")));\n            let periodTaskHelper = []\n            let idsArray = goal.categories.map(category => category.id);\n            // console.log(\"periodStart@@@@@@@@@@\", periodStart);\n            // console.log(\"periodEnd@@@@@@@@@@\", periodEnd);\n\n            for(let task of completedTasks){\n                // console.log(\"task@@@@@@@@@@@@\", task);\n                // console.log(\"goal.categories$$$$$$$$$$$OUT\", goal.categories);\n                // console.log(\"Objectgoal.categories$$$$$$$$$$$OUT\", Object.values(goal.categories));\n                // console.log(\"task.category$$$$$$$$$$$$$OUT\", task.category);\n                // console.log(\"idsArray.includes(task.category.id)\", idsArray.includes(task.category.id));\n                if(idsArray.includes(task.category.id)){\n                    // console.log(\"goal.categories$$$$$$$$$$$IN\", goal.categories);\n                    // console.log(\"task.category$$$$$$$$$$$$$IN\", task.category);\n                    // console.log(\"idsArray\", idsArray);\n                    // console.log(\"task.category.id\", task.category.id);\n                    console.log(\"completedTasks.completedTimeStamp@@@@@@@@@@@@\", completedTasks.completedTimeStamp);\n                    console.log(\"periodStart\", periodStart);\n                    console.log(\"periodEnd\", periodEnd);\n                    console.log(\"completedTasks\", completedTasks);\n                    console.log(\"completedTasks\", task.completedTimeStamp);\n                    console.log(\"completedTasks\", task.completedTimeStamp<=periodEnd);\n                    if(\n                        task.completedTimeStamp>=periodStart\n                    &&\n                        task.completedTimeStamp<=periodEnd\n                    ){\n                        console.log(\"completedTasks.completedTimeStamp@@@@@@@@@@@@\", completedTasks.completedTimeStamp);\n                        console.log(\"the task is about to be pushed\");\n                        periodTaskHelper.push(task);\n                    }\n\n                }\n            }\n            setTasksOnTarget(periodTaskHelper);\n        }  \n    }\n\n    const translatingTheGoalTargetIntoTasksNumber = () => {\n        const nuAllTasksPeriod = allCompletedTasksGivenPeriod.length||1;\n        const numberOfTaksNeededToMeetTarget = (goal.target / nuAllTasksPeriod) * 100;\n        return numberOfTaksNeededToMeetTarget\n        \n    }\n\n    const findDaysAfter = (goal) => {\n        console.log(\"within find days after\");\n        if(goal.type===\"DAILY\"){\n            // console.log(\"of daily type\");///////\n            // console.log(\"1 to be returned\");///////\n            return 1;\n\n        }if(goal.type===\"WEEKLY\"){\n            // console.log(\"of weekly type\");///////\n            // console.log(\"7 to be returned\");///////\n            return 7;\n            \n        }if(goal.type===\"MONTHLY\"){\n            // return 30;\n            console.log(\"of monthly type\");///////\n            console.log(\"monthly to be returned\");///////\n            return \"MONTHLY\";\n            \n        } \n    }\n    // change the set to return and have the set with the function as argument to when edit is pressed.\n    // move that logic to the distinct page where this might actually change\n    // should I copy this or move it all in an outside function where it could happily leave for ever?!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // because the problem is that it needs to be calculated in two places here to be desplayed and in the distinc to be changed.\n\n    const findGoalEndDate = (goal) => {\n        // console.log(\"within find goals end date\");//////////\n        let daysAfter = findDaysAfter(goal);\n        let goalStartDate = goal.startDate;\n        \n        console.log(\"goalStartDate\", goalStartDate);/////////\n        let endDate = new Date(goalStartDate.split(\"-\").toString());\n        console.log(\"endDate\", endDate);//////////\n        if(goalStartDate && daysAfter){\n            if(daysAfter===\"MONTHLY\"){\n                endDate.setMonth(endDate.getMonth() + 1);\n                setGoalEndDate(endDate.toLocaleDateString().split(\"/\").reverse().join(\"-\"));\n\n            }else{\n                endDate.setDate(endDate.getDate() + daysAfter);\n                setGoalEndDate(endDate.toLocaleDateString().split(\"/\").reverse().join(\"-\"));\n\n            }\n        }\n    }\n\n    const calculatingTargetOutcome = () => {\n        if(goalEndDate){\n            let dateNow = Date.parse(new Date());\n            console.log(\"endDate\", goalEndDate);//////////\n            let dateEnd = Date.parse(new Date(goalEndDate.split(\"-\")));\n            console.log(\"dateEnd\", dateEnd);//////////////\n            if(dateNow <= dateEnd){\n                console.log(\"penidng\");////////////\n                return \"pending\"\n\n            }else{\n                console.log(\"tasksOnTarget\", tasksOnTarget);\n                console.log(\"translatingTheGoalTargetIntoTasksNumber()\", translatingTheGoalTargetIntoTasksNumber());\n                if(tasksOnTarget.length >= translatingTheGoalTargetIntoTasksNumber()){\n                    console.log(\"succeeded\");//////////\n                    return \"succeeded\"\n\n                }else{\n                    console.log(\"failed\");///////\n                    return \"failed\"\n\n                }\n            }\n        }\n    }\n\n    const onGoalClick = (e) => {\n        console.log(\"a goal has been clicked\", goal);/////////\n        navigate(`/goal/:${goal.title}`, {\n            state: {\n                goal:goal,\n                categories:categories,\n                priorities: priorities,\n                endDate: goalEndDate\n            }\n        })\n    }\n\n\n    return(\n        <div>\n            {loading?\n            <p>Loading...</p>\n            :\n            <button  className={calculatingTargetOutcome()} onClick={ onGoalClick }><>\n                <div>\n                    <label> Goal Title </label>\n                    <p> {goalTitle} </p>\n                </div>\n                <div>\n                    <label> Goal Start Date </label>\n                    <p> {goalStartDate} </p>\n                </div>\n                <div>\n                    <label> Goal End Date </label>\n                    <p> {goalEndDate} </p>\n                </div>\n                <div>\n                    <label> Goal Target </label>\n                    <p> {goalTarget} </p>\n                </div>\n            </>See Goal Details </button>\n            }\n            \n        </div>\n\n    )\n}\n\nexport default Goal;\n"]},"metadata":{},"sourceType":"module"}