{"ast":null,"code":"var _jsxFileName = \"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/WholeMainPageContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport AllTasksContainer from './AllTasksContainer';\nimport TasksBoxMainMenuBar from '../components/TasksBoxMainMenuBar';\nimport Menu from '../components/Menu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WholeMainPageContainer = _ref => {\n  _s();\n\n  let {\n    uncompletedTasks,\n    completedTasks,\n    categories,\n    priorities,\n    user\n  } = _ref;\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [categoriesToDisplay, setCategoriesToDisplay] = useState();\n  const [prioritiesToDisplay, setPrioritiesToDisplay] = useState();\n  const [uncompletedTasksToDisplay, setUncompletedTasksToDisplay] = useState();\n  const [completedTasksToDisplay, setCompletedTasksToDisplay] = useState();\n  let prioritiesToDisplayHelper = [];\n  let categoriesToDisplayHelper = [];\n  useEffect(() => {\n    prioritiesToDisplayHelper = [];\n    categoriesToDisplayHelper = [];\n  }, []);\n\n  const closeMenuFunction = () => {\n    setIsMenuOpen(false);\n  };\n\n  const setPrioritiesFromDropDown = choosenOption => {\n    prioritiesToDisplayHelper.push(choosenOption);\n    setPrioritiesToDisplay(prioritiesToDisplayHelper);\n  };\n\n  const setCategoriesFromDropDown = choosenOption => {\n    categoriesToDisplayHelper.push(choosenOption);\n    setCategoriesToDisplay(categoriesToDisplayHelper);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isMenuOpen ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsMenuOpen(!isMenuOpen),\n        children: \"Menu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(Menu, {\n      closeMenuFunction: () => closeMenuFunction(),\n      categories: categories,\n      priorities: priorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TasksBoxMainMenuBar, {\n      categories: categories,\n      priorities: priorities,\n      setPrioritiesFromDropDown: choosenOption => setPrioritiesFromDropDown(choosenOption),\n      setCategoriesFromDropDown: choosenOption => setCategoriesFromDropDown(choosenOption)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hello \", user.email, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AllTasksContainer, {\n      uncompletedTasksToDisplay: uncompletedTasks,\n      completedTasksToDisplay: completedTasks,\n      categories: categories,\n      priorities: priorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WholeMainPageContainer, \"4/GF/x7yMp9TmFLQn8dRG0hI/fI=\");\n\n_c = WholeMainPageContainer;\nexport default WholeMainPageContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"WholeMainPageContainer\");","map":{"version":3,"sources":["/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/containers/WholeMainPageContainer.js"],"names":["useState","useEffect","AllTasksContainer","TasksBoxMainMenuBar","Menu","WholeMainPageContainer","uncompletedTasks","completedTasks","categories","priorities","user","isMenuOpen","setIsMenuOpen","categoriesToDisplay","setCategoriesToDisplay","prioritiesToDisplay","setPrioritiesToDisplay","uncompletedTasksToDisplay","setUncompletedTasksToDisplay","completedTasksToDisplay","setCompletedTasksToDisplay","prioritiesToDisplayHelper","categoriesToDisplayHelper","closeMenuFunction","setPrioritiesFromDropDown","choosenOption","push","setCategoriesFromDropDown","email"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,mBAAP,MAAgC,mCAAhC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;;;AAEA,MAAMC,sBAAsB,GAAE,QAAwE;AAAA;;AAAA,MAAvE;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA,cAApB;AAAoCC,IAAAA,UAApC;AAAgDC,IAAAA,UAAhD;AAA4DC,IAAAA;AAA5D,GAAuE;AAClG,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACa,mBAAD,EAAsBC,sBAAtB,IAAgDd,QAAQ,EAA9D;AACA,QAAM,CAACe,mBAAD,EAAsBC,sBAAtB,IAAgDhB,QAAQ,EAA9D;AACA,QAAM,CAACiB,yBAAD,EAA4BC,4BAA5B,IAA4DlB,QAAQ,EAA1E;AACA,QAAM,CAACmB,uBAAD,EAA0BC,0BAA1B,IAAwDpB,QAAQ,EAAtE;AAEA,MAAIqB,yBAAyB,GAAG,EAAhC;AACA,MAAIC,yBAAyB,GAAG,EAAhC;AAEArB,EAAAA,SAAS,CAAC,MAAM;AACZoB,IAAAA,yBAAyB,GAAG,EAA5B;AACAC,IAAAA,yBAAyB,GAAG,EAA5B;AAEH,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMC,iBAAiB,GAAG,MAAM;AAC5BX,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAFD;;AAIA,QAAMY,yBAAyB,GAAIC,aAAD,IAAmB;AAEjDJ,IAAAA,yBAAyB,CAACK,IAA1B,CAA+BD,aAA/B;AACAT,IAAAA,sBAAsB,CAACK,yBAAD,CAAtB;AACH,GAJD;;AAMA,QAAMM,yBAAyB,GAAIF,aAAD,IAAmB;AAEjDH,IAAAA,yBAAyB,CAACI,IAA1B,CAA+BD,aAA/B;AACAX,IAAAA,sBAAsB,CAACQ,yBAAD,CAAtB;AACH,GAJD;;AAMA,sBACI;AAAA,eACK,CAACX,UAAD,gBACG;AAAA,6BACI;AAAQ,QAAA,OAAO,EAAE,MAAIC,aAAa,CAAC,CAACD,UAAF,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,qBADH,gBAKG,QAAC,IAAD;AACI,MAAA,iBAAiB,EAAG,MAAIY,iBAAiB,EAD7C;AAEI,MAAA,UAAU,EAAGf,UAFjB;AAGI,MAAA,UAAU,EAAGC;AAHjB;AAAA;AAAA;AAAA;AAAA,YANR,eAYI,QAAC,mBAAD;AACI,MAAA,UAAU,EAAGD,UADjB;AAEI,MAAA,UAAU,EAAGC,UAFjB;AAGI,MAAA,yBAAyB,EAAGgB,aAAD,IAAkBD,yBAAyB,CAACC,aAAD,CAH1E;AAII,MAAA,yBAAyB,EAAGA,aAAD,IAAkBE,yBAAyB,CAACF,aAAD;AAJ1E;AAAA;AAAA;AAAA;AAAA,YAZJ,eAkBI;AAAA,2BAAUf,IAAI,CAACkB,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBJ,eAmBI,QAAC,iBAAD;AACI,MAAA,yBAAyB,EAAGtB,gBADhC;AAEI,MAAA,uBAAuB,EAAGC,cAF9B;AAGI,MAAA,UAAU,EAAGC,UAHjB;AAII,MAAA,UAAU,EAAGC;AAJjB;AAAA;AAAA;AAAA;AAAA,YAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA6BH,CA7DD;;GAAMJ,sB;;KAAAA,sB;AA+DN,eAAeA,sBAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport AllTasksContainer from './AllTasksContainer';\nimport TasksBoxMainMenuBar from '../components/TasksBoxMainMenuBar';\nimport Menu from '../components/Menu';\n\nconst WholeMainPageContainer= ({ uncompletedTasks, completedTasks, categories, priorities, user }) => {\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n    const [categoriesToDisplay, setCategoriesToDisplay] = useState()\n    const [prioritiesToDisplay, setPrioritiesToDisplay] = useState()\n    const [uncompletedTasksToDisplay, setUncompletedTasksToDisplay] = useState()\n    const [completedTasksToDisplay, setCompletedTasksToDisplay] = useState()\n\n    let prioritiesToDisplayHelper = [];\n    let categoriesToDisplayHelper = [];\n\n    useEffect(() => {\n        prioritiesToDisplayHelper = [];\n        categoriesToDisplayHelper = [];\n        \n    }, []);\n\n    const closeMenuFunction = () => {\n        setIsMenuOpen(false);\n    }\n\n    const setPrioritiesFromDropDown = (choosenOption) => {\n        \n        prioritiesToDisplayHelper.push(choosenOption)\n        setPrioritiesToDisplay(prioritiesToDisplayHelper);\n    }\n\n    const setCategoriesFromDropDown = (choosenOption) => {\n        \n        categoriesToDisplayHelper.push(choosenOption)\n        setCategoriesToDisplay(categoriesToDisplayHelper);\n    }\n\n    return (\n        <div>\n            {!isMenuOpen?\n                <>\n                    <button onClick={()=>setIsMenuOpen(!isMenuOpen)}>Menu</button>\n                </>\n            :\n                <Menu\n                    closeMenuFunction={ ()=>closeMenuFunction() }\n                    categories={ categories }\n                    priorities={ priorities }\n                />\n            }\n            <TasksBoxMainMenuBar \n                categories={ categories }\n                priorities={ priorities }\n                setPrioritiesFromDropDown={(choosenOption)=> setPrioritiesFromDropDown(choosenOption) }\n                setCategoriesFromDropDown={(choosenOption)=> setCategoriesFromDropDown(choosenOption) }\n            />\n            <p>Hello {user.email} </p>\n            <AllTasksContainer \n                uncompletedTasksToDisplay={ uncompletedTasks } \n                completedTasksToDisplay={ completedTasks }\n                categories={ categories }\n                priorities={ priorities }\n            />\n\n        </div>\n    )\n}\n\nexport default WholeMainPageContainer;"]},"metadata":{},"sourceType":"module"}