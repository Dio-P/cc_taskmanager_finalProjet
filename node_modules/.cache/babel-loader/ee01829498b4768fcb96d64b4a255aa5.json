{"ast":null,"code":"var _jsxFileName = \"/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/Task.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport RequestContext from \"../context/RequestContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Task = _ref => {\n  _s();\n\n  let {\n    task,\n    categories,\n    priorities,\n    updateWholeMainPageStateFromComponent\n  } = _ref;\n  const navigate = useNavigate(); // const location = useLocation();\n  // const task = location.state.task;\n  // const categories = location.state.categories;\n  // const priorities = location.state.priorities;\n  // const [loading, setLoading] = useState(true);\n  // const [isMenuOpen, setIsMenuOpen] = useState(false);\n  // const [editTitle, setEditTitle] = useState(false);\n  // const [taskTitle, setTaskTitle] = useState(task.title);\n\n  const [taskCompleted, setTaskCompleted] = useState(task.completed); ///////////\n\n  const [taskTitle, setTaskTitle] = useState(task.category);\n  const [taskCategory, setTaskCategory] = useState(task.category);\n  const [taskPriority, setTaskPriority] = useState(task.priority);\n  const [taskDescription, setTaskDescription] = useState(task.description);\n  const [taskDate, setTaskDate] = useState(task.date);\n  const [taskTime, setTaskTime] = useState(task.time);\n  const [datedTaskType, setDatedTaskType] = useState(task.type);\n  const [completedTimeStamp, setCompletedTimeStamp] = useState(null);\n  const [taskDuration, setTaskDuration] = useState(task.duration);\n  const [taskCollaborators, setTaskCollaborators] = useState(null); // const [collaboratorsToDisplay, setCollaboratorsToDisplay] = useState([]);\n  // const [searchInput, setSearchInput] = useState(\"\");\n\n  const {\n    get,\n    post,\n    put\n  } = useContext(RequestContext);\n  useEffect(() => {\n    // setTaskTitle()\n    // setTaskCategory();\n    // setTaskPriority\n    // setTaskDescription\n    // setTaskDate\n    // setTaskTime\n    // setDatedTaskType\n    // setCompletedTimeStamp\n    // setTaskDuration\n    // setTaskCollaborators\n    setTaskCompleted(task.completed);\n  }, [task]); // const onClickingDone = () => {\n  //     const updatedTask= { }\n  //     updatedTask[\"title\"] = taskTitle;\n  //     updatedTask[\"category\"] = taskCategory;\n  //     updatedTask[\"priority\"] = taskPriority;\n  //     updatedTask[\"completed\"]=taskCompleted;\n  //     updatedTask[\"completedTimeStamp\"]=completedTimeStamp;\n  //     if(taskDescription){\n  //         updatedTask[\"description\"]=taskDescription;\n  //     }\n  //     if(taskDate){\n  //         updatedTask[\"date\"]=taskDate;\n  //         updatedTask[\"type\"]=datedTaskType;\n  //     }else{\n  //         updatedTask[\"type\"]=\"SOMEDAY\";\n  //     }\n  //     if(taskTime){\n  //         updatedTask[\"time\"]=taskTime;\n  //     }\n  //     if(taskDuration){\n  //         updatedTask[\"duration\"]=taskDuration;\n  //     }\n  //     console.log(\"updatedTask\", updatedTask);/////////////\n  //     put(`tasks/${task.id}`, updatedTask)\n  //     // updateAppMainStateFromComponent(updatedTask)\n  //     // redirect to home page            \n  // }\n\n  const onCheckboxClick = () => {\n    // updateWholeMainPageStateFromComponent(task);\n    console.log(\"taskNotUpd\", task);\n    setTaskCompleted(!taskCompleted);\n    console.log(\"taskAfterBEfore\", task);\n    task.completed = taskCompleted;\n    console.log(\"taskUpdated\", task); // put     \n  };\n\n  const onTaskClick = e => {\n    navigate(`/task/:${task.title}`, {\n      state: {\n        task: task,\n        categories: categories,\n        priorities: priorities\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"task\",\n      name: \"task\",\n      checked: taskCompleted,\n      onClick: () => onCheckboxClick()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"task\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onTaskClick,\n        children: task.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 40\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Task, \"/71W4j4kK8yHoW53PNQm5y0kOT4=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Task;\nexport default Task;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["/Users/dionysiospapadopoulos/Documents/CodeClan/taskManagerFinalProject/task_manager/client/src/components/Task.js"],"names":["useState","useEffect","useContext","useNavigate","RequestContext","Task","task","categories","priorities","updateWholeMainPageStateFromComponent","navigate","taskCompleted","setTaskCompleted","completed","taskTitle","setTaskTitle","category","taskCategory","setTaskCategory","taskPriority","setTaskPriority","priority","taskDescription","setTaskDescription","description","taskDate","setTaskDate","date","taskTime","setTaskTime","time","datedTaskType","setDatedTaskType","type","completedTimeStamp","setCompletedTimeStamp","taskDuration","setTaskDuration","duration","taskCollaborators","setTaskCollaborators","get","post","put","onCheckboxClick","console","log","onTaskClick","e","title","state"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport RequestContext from \"../context/RequestContext\";\n\nconst Task = ({ task, categories, priorities, updateWholeMainPageStateFromComponent }) => {\n    const navigate = useNavigate();\n    // const location = useLocation();\n    // const task = location.state.task;\n    // const categories = location.state.categories;\n    // const priorities = location.state.priorities;\n\n    // const [loading, setLoading] = useState(true);\n    // const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n    // const [editTitle, setEditTitle] = useState(false);\n    // const [taskTitle, setTaskTitle] = useState(task.title);\n    \n    const [taskCompleted, setTaskCompleted] = useState(task.completed);///////////\n\n    const [taskTitle, setTaskTitle] = useState(task.category);\n    const [taskCategory, setTaskCategory] = useState(task.category);\n    const [taskPriority, setTaskPriority] = useState(task.priority);\n    const [taskDescription, setTaskDescription] = useState(task.description);\n    const [taskDate, setTaskDate] = useState(task.date);\n    const [taskTime, setTaskTime] = useState(task.time);\n    const [datedTaskType, setDatedTaskType] = useState(task.type);\n    const [completedTimeStamp, setCompletedTimeStamp] = useState(null);\n    const [taskDuration, setTaskDuration] = useState(task.duration);\n    const [taskCollaborators, setTaskCollaborators] = useState(null);\n\n    // const [collaboratorsToDisplay, setCollaboratorsToDisplay] = useState([]);\n    // const [searchInput, setSearchInput] = useState(\"\");\n\n    const {get, post, put} = useContext(RequestContext);\n\n\n    useEffect(() => {\n        // setTaskTitle()\n        // setTaskCategory();\n        // setTaskPriority\n        // setTaskDescription\n        // setTaskDate\n        // setTaskTime\n        // setDatedTaskType\n        // setCompletedTimeStamp\n        // setTaskDuration\n        // setTaskCollaborators\n        setTaskCompleted(task.completed);\n        \n    }, [task]);\n    // const onClickingDone = () => {\n    //     const updatedTask= { }\n    //     updatedTask[\"title\"] = taskTitle;\n    //     updatedTask[\"category\"] = taskCategory;\n    //     updatedTask[\"priority\"] = taskPriority;\n    //     updatedTask[\"completed\"]=taskCompleted;\n    //     updatedTask[\"completedTimeStamp\"]=completedTimeStamp;\n\n    //     if(taskDescription){\n    //         updatedTask[\"description\"]=taskDescription;\n    //     }\n    //     if(taskDate){\n    //         updatedTask[\"date\"]=taskDate;\n    //         updatedTask[\"type\"]=datedTaskType;\n    //     }else{\n    //         updatedTask[\"type\"]=\"SOMEDAY\";\n\n    //     }\n    //     if(taskTime){\n    //         updatedTask[\"time\"]=taskTime;\n    //     }\n    //     if(taskDuration){\n    //         updatedTask[\"duration\"]=taskDuration;\n    //     }\n        \n    //     console.log(\"updatedTask\", updatedTask);/////////////\n        \n    //     put(`tasks/${task.id}`, updatedTask)\n    //     // updateAppMainStateFromComponent(updatedTask)\n        \n    //     // redirect to home page            \n    // }\n\n    const onCheckboxClick = () => {\n        // updateWholeMainPageStateFromComponent(task);\n        console.log(\"taskNotUpd\", task);\n        setTaskCompleted(!taskCompleted)\n        console.log(\"taskAfterBEfore\", task);\n        task.completed=taskCompleted;\n        console.log(\"taskUpdated\", task);\n        // put     \n    }\n\n    const onTaskClick = (e) => {\n        navigate(`/task/:${task.title}`, {\n            state: {\n                task:task,\n                categories:categories,\n                priorities: priorities,\n            }\n        })\n    }\n\n    return (\n            <div>\n                <input type=\"checkbox\" id=\"task\" name=\"task\" checked={taskCompleted} onClick={()=>onCheckboxClick()}/>\n                <label htmlFor=\"task\"> <button onClick={onTaskClick}>{ task.title }</button> </label>\n            </div>\n      )\n}\n\nexport default Task;\n"]},"metadata":{},"sourceType":"module"}